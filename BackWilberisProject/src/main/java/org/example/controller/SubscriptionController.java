package org.example.controller;

import org.example.entity.Subscription;
import org.example.entity.User;
import org.example.repository.SubscriptionRepository;
import org.example.repository.UserRepository;
import org.example.service.AuthService;
import org.example.service.SubscriptionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/subscription")
public class SubscriptionController {
    
    // –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
    private static final ConcurrentHashMap<String, Boolean> processedRequests = new ConcurrentHashMap<>();
    
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –∫—ç—à–µ
    private static final int MAX_CACHE_SIZE = 1000;
    
    // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à–µ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
    private static final long CACHE_TTL = 3600000; // 1 —á–∞—Å
    
    @Autowired
    private SubscriptionService subscriptionService;
    
    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private SubscriptionRepository subscriptionRepository;
    
    @Autowired
    private AuthService authService;
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–∞—Ö –ø–æ–¥–ø–∏—Å–∫–∏
     */
    @GetMapping("/plans")
    public ResponseEntity<?> getSubscriptionPlans() {
        try {
            System.out.println("üìã –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏");
            
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –ø–ª–∞–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            List<Map<String, Object>> plans = List.of(
                Map.of(
                    "planType", "PLAN_FREE",
                    "displayName", "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π",
                    "price", 0.0,
                    "days", 7, // –¥–Ω–µ–π
                    "features", List.of(
                        "–ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                        "–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø",
                        "7 –¥–Ω–µ–π"
                    )
                ),
                Map.of(
                    "planType", "PLAN_30_DAYS",
                    "displayName", "30 –¥–Ω–µ–π",
                    "price", 1499.0,
                    "days", 30, // –¥–Ω–µ–π
                    "features", List.of(
                        "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞",
                        "ABC-–∞–Ω–∞–ª–∏–∑",
                        "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–æ–∫"
                    )
                ),
                Map.of(
                    "planType", "PLAN_60_DAYS",
                    "displayName", "60 –¥–Ω–µ–π",
                    "price", 2799.0,
                    "days", 60, // –¥–Ω–µ–π
                    "features", List.of(
                        "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞",
                        "ABC-–∞–Ω–∞–ª–∏–∑",
                        "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–æ–∫",
                        "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∞–∫—Ü–∏–π",
                        "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
                    )
                ),
                Map.of(
                    "planType", "PLAN_90_DAYS",
                    "displayName", "90 –¥–Ω–µ–π",
                    "price", 3999.0,
                    "days", 90, // –¥–Ω–µ–π
                    "features", List.of(
                        "–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ 60-–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞",
                        "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                        "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å 1–°",
                        "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä",
                        "API –¥–æ—Å—Ç—É–ø"
                    )
                )
            );
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "plans", plans
            ));
            
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏: " + e.getMessage());
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏: " + e.getMessage()
            ));
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/info")
    public ResponseEntity<?> getSubscriptionInfo(
            @RequestHeader(value = "Authorization", required = false) String authHeader,
            HttpServletRequest request) {
        try {
            System.out.println("üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ");
            
            String userEmail = null;
            boolean tokenExpired = false;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏—Å—Ç–µ–∫—à–µ–º —Ç–æ–∫–µ–Ω–µ –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö –∑–∞–ø—Ä–æ—Å–∞
            if (request.getAttribute("expiredToken") != null && (Boolean)request.getAttribute("expiredToken")) {
                userEmail = (String) request.getAttribute("expiredTokenEmail");
                tokenExpired = true;
                System.out.println("‚è∞ –ó–∞–ø—Ä–æ—Å —Å –∏—Å—Ç–µ–∫—à–∏–º —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + userEmail);
            } else if (authHeader != null && authHeader.startsWith("Bearer ")) {
                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞
                String token = authHeader.substring(7);
                userEmail = authService.extractEmailFromToken(token);
            }
            
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            if (userEmail == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
                    "tokenExpired", tokenExpired
                ));
            }
            
            User user = userRepository.findByEmail(userEmail)
                    .orElse(null);
            
            if (user == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "tokenExpired", tokenExpired
                ));
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            Subscription subscription = subscriptionService.getActiveSubscription(user);
            
            if (subscription == null) {
                return ResponseEntity.ok(Map.of(
                    "success", true,
                    "hasSubscription", false,
                    "tokenExpired", tokenExpired
                ));
            }
            
            Map<String, Object> subscriptionData = new HashMap<>();
            subscriptionData.put("id", subscription.getId());
            subscriptionData.put("planId", subscription.getPlanId());
            subscriptionData.put("planType", subscription.getPlanType().name());
            subscriptionData.put("status", subscription.getStatus().name());
            subscriptionData.put("startDate", subscription.getStartDate().toString());
            subscriptionData.put("endDate", subscription.getEndDate().toString());
            subscriptionData.put("active", subscription.isActive());
            subscriptionData.put("autoRenew", subscription.isAutoRenew());
            subscriptionData.put("trial", subscription.getPlanType() == Subscription.PlanType.PLAN_FREE);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
            String planType = subscription.getPlanType().name();
            Map<String, Object> planInfo = switch (planType) {
                case "PLAN_FREE" -> Map.of(
                    "name", "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π",
                    "price", 0.0
                );
                case "PLAN_30_DAYS" -> Map.of(
                    "name", "30 –¥–Ω–µ–π",
                    "price", 1499.0
                );
                case "PLAN_60_DAYS" -> Map.of(
                    "name", "60 –¥–Ω–µ–π",
                    "price", 2799.0
                );
                case "PLAN_90_DAYS" -> Map.of(
                    "name", "90 –¥–Ω–µ–π",
                    "price", 3999.0
                );
                default -> Map.of(
                    "name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω",
                    "price", 0.0
                );
            };
            
            subscriptionData.put("plan", planInfo);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("hasSubscription", true);
            response.put("subscription", subscriptionData);
            response.put("tokenExpired", tokenExpired);
            
            if (tokenExpired) {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                String newToken = authService.generateNewToken(user);
                response.put("newToken", newToken);
            }
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ: " + e.getMessage());
            e.printStackTrace(); // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–µ–∫-—Ç—Ä–µ–π—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ: " + e.getMessage()
            ));
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
     */
    @PostMapping("/create")
    public ResponseEntity<?> createSubscription(
            @RequestHeader(value = "Authorization", required = false) String authHeader,
            @RequestBody Map<String, String> request,
            HttpServletRequest httpRequest) {
        try {
            System.out.println("üìù –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏");
            System.out.println("Request body: " + request);
            
            String userEmail = null;
            boolean tokenExpired = false;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏—Å—Ç–µ–∫—à–µ–º —Ç–æ–∫–µ–Ω–µ –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö –∑–∞–ø—Ä–æ—Å–∞
            if (httpRequest.getAttribute("expiredToken") != null && (Boolean)httpRequest.getAttribute("expiredToken")) {
                userEmail = (String) httpRequest.getAttribute("expiredTokenEmail");
                tokenExpired = true;
                System.out.println("‚è∞ –ó–∞–ø—Ä–æ—Å —Å –∏—Å—Ç–µ–∫—à–∏–º —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + userEmail);
            } else if (authHeader != null && authHeader.startsWith("Bearer ")) {
                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞
                String token = authHeader.substring(7);
                userEmail = authService.extractEmailFromToken(token);
            }
            
            if (userEmail == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
                    "tokenExpired", tokenExpired
                ));
            }
            
            User user = userRepository.findByEmail(userEmail)
                    .orElse(null);
            
            if (user == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "tokenExpired", tokenExpired
                ));
            }
            
            // –ü–æ–ª—É—á–∞–µ–º planId –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            String planId = request.get("planId");
            System.out.println("Received planId: " + planId);
            
            if (planId == null || planId.trim().isEmpty()) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏",
                    "tokenExpired", tokenExpired
                ));
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å planId
            if (!planId.equals("free") && !planId.equals("basic") && !planId.equals("pro") && !planId.equals("enterprise")) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏: " + planId,
                    "tokenExpired", tokenExpired
                ));
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            if (subscriptionService.hasActiveSubscription(user)) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
                    "tokenExpired", tokenExpired
                ));
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
            Subscription subscription = new Subscription();
            subscription.setUser(user);
            subscription.setPlanId(planId);
            subscription.setStartDate(LocalDateTime.now());
            subscription.setTrialPeriod(planId.equals("free"));
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞–Ω–∞
            int durationDays = switch (planId) {
                case "free" -> 7; // 7 –¥–Ω–µ–π –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
                case "basic", "pro", "enterprise" -> 30;
                default -> 30;
            };
            
            subscription.setEndDate(LocalDateTime.now().plusDays(durationDays));
            subscription.setActive(true);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            subscription = subscriptionRepository.save(subscription);
            
            System.out.println("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: " + subscription.getId());
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
            Map<String, Object> subscriptionData = new HashMap<>();
            subscriptionData.put("id", subscription.getId());
            subscriptionData.put("planId", subscription.getPlanId());
            subscriptionData.put("startDate", subscription.getStartDate().toString());
            subscriptionData.put("endDate", subscription.getEndDate().toString());
            subscriptionData.put("active", subscription.isActive());
            subscriptionData.put("trial", subscription.isTrialPeriod());
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
            Map<String, Object> planInfo = switch (planId) {
                case "free" -> Map.of(
                    "name", "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π",
                    "price", 0
                );
                case "basic" -> Map.of(
                    "name", "–ë–∞–∑–æ–≤—ã–π",
                    "price", 990
                );
                case "pro" -> Map.of(
                    "name", "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π",
                    "price", 1990
                );
                case "enterprise" -> Map.of(
                    "name", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π",
                    "price", 4990
                );
                default -> Map.of(
                    "name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω",
                    "price", 0
                );
            };
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞");
            response.put("subscription", subscriptionData);
            response.put("plan", planInfo);
            
            if (tokenExpired) {
                response.put("tokenExpired", true);
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                String newToken = authService.generateNewToken(user);
                response.put("newToken", newToken);
            }
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: " + e.getMessage());
            e.printStackTrace(); // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ —Å—Ç–µ–∫–∞ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: " + e.getMessage()
            ));
        }
    }
    
    /**
     * –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
     */
    @PostMapping("/cancel")
    public ResponseEntity<?> cancelSubscription(
            @RequestHeader(value = "Authorization", required = false) String authHeader,
            HttpServletRequest request) {
        try {
            System.out.println("‚ùå –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏");
            
            String userEmail = null;
            boolean tokenExpired = false;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏—Å—Ç–µ–∫—à–µ–º —Ç–æ–∫–µ–Ω–µ –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö –∑–∞–ø—Ä–æ—Å–∞
            if (request.getAttribute("expiredToken") != null && (Boolean)request.getAttribute("expiredToken")) {
                userEmail = (String) request.getAttribute("expiredTokenEmail");
                tokenExpired = true;
                System.out.println("‚è∞ –ó–∞–ø—Ä–æ—Å —Å –∏—Å—Ç–µ–∫—à–∏–º —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + userEmail);
            } else if (authHeader != null && authHeader.startsWith("Bearer ")) {
                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞
                String token = authHeader.substring(7);
                userEmail = authService.extractEmailFromToken(token);
            }
            
            if (userEmail == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
                    "tokenExpired", tokenExpired
                ));
            }
            
            User user = userRepository.findByEmail(userEmail)
                    .orElse(null);
            
            if (user == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "tokenExpired", tokenExpired
                ));
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            Subscription subscription = subscriptionService.getActiveSubscription(user);
            
            if (subscription == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏",
                    "tokenExpired", tokenExpired
                ));
            }
            
            // –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            subscription.setActive(false);
            subscriptionRepository.save(subscription);
            
            System.out.println("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: " + subscription.getId());
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞");
            
            if (tokenExpired) {
                response.put("tokenExpired", true);
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                String newToken = authService.generateNewToken(user);
                response.put("newToken", newToken);
            }
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏: " + e.getMessage());
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏: " + e.getMessage()
            ));
        }
    }
    
    /**
     * –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: —Å–æ–∑–¥–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
     */
    @PostMapping("/create-trial")
    public ResponseEntity<?> createTrialSubscription(
            @RequestBody(required = false) Map<String, String> requestBody,
            HttpServletRequest request) {
        try {
            System.out.println("\n\nüéÅ ===== –ù–ê–ß–ê–õ–û –°–û–ó–î–ê–ù–ò–Ø –ü–†–û–ë–ù–û–ô –ü–û–î–ü–ò–°–ö–ò =====");
            System.out.println("üì¶ Request body: " + (requestBody != null ? requestBody : "EMPTY"));
            
            String userEmail = null;
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å email –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            if (requestBody != null && requestBody.containsKey("email")) {
                userEmail = requestBody.get("email");
                System.out.println("üìß Email –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞: " + userEmail);
            }
            
            System.out.println("üìß –ò—Ç–æ–≥–æ–≤—ã–π email –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: " + userEmail);
            
            // –ï—Å–ª–∏ email –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            if (userEmail == null) {
                System.out.println("‚ùå Email –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ");
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "error", "MissingEmail",
                    "path", request.getRequestURI()
                ));
            }
            
            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
            System.out.println("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email: " + userEmail);
            User user = userRepository.findByEmail(userEmail)
                    .orElse(null);
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            if (user == null) {
                System.out.println("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: " + userEmail);
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "error", "UserNotFound",
                    "path", request.getRequestURI()
                ));
            }
            
            System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: " + user.getEmail() + " (ID: " + user.getId() + ")");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            System.out.println("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏...");
            boolean hasActiveSubscription = subscriptionService.hasActiveSubscription(user);
            System.out.println("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: " + (hasActiveSubscription ? "–ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞" : "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"));
            
            if (hasActiveSubscription) {
                System.out.println("‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: " + userEmail);
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
                    "error", "SubscriptionExists",
                    "path", request.getRequestURI()
                ));
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
            System.out.println("üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏...");
            Subscription subscription = new Subscription();
            subscription.setUser(user);
            subscription.setPlanType(Subscription.PlanType.PLAN_FREE); // –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            subscription.setStatus(Subscription.SubscriptionStatus.ACTIVE);
            subscription.setStartDate(LocalDateTime.now());
            subscription.setEndDate(LocalDateTime.now().plusDays(7)); // 7 –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            subscription.setPrice(0.0); // –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
            subscription.setAutoRenew(false);
            subscription.setPaymentMethod("FREE_TRIAL");
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            try {
                System.out.println("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...");
                subscription = subscriptionRepository.save(subscription);
                System.out.println("‚úÖ –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: " + subscription.getId() + " –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + userEmail);
            } catch (Exception e) {
                System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: " + e.getMessage());
                e.printStackTrace();
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: " + e.getMessage(),
                    "error", "DatabaseError",
                    "path", request.getRequestURI()
                ));
            }
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞");
            response.put("subscription", Map.of(
                "id", subscription.getId(),
                "planId", subscription.getPlanId(),
                "startDate", subscription.getStartDate().toString(),
                "endDate", subscription.getEndDate().toString(),
                "active", subscription.isActive(),
                "trial", true
            ));
            
            // –¢–æ–∫–µ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            
            System.out.println("üéÅ ===== –ó–ê–í–ï–†–®–ï–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –ü–†–û–ë–ù–û–ô –ü–û–î–ü–ò–°–ö–ò =====\n\n");
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            System.err.println("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: " + e.getMessage());
            e.printStackTrace(); // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–µ–∫-—Ç—Ä–µ–π—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: " + e.getMessage(),
                "error", e.getClass().getSimpleName(),
                "path", request.getRequestURI()
            ));
        }
    }

    /**
     * –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/debug/user-subscriptions")
    public ResponseEntity<?> debugUserSubscriptions(
            @RequestParam String email) {
        try {
            System.out.println("üîç –û—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + email);
            
            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
            User user = userRepository.findByEmail(email)
                    .orElse(null);
            
            if (user == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                ));
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            List<Subscription> allSubscriptions = subscriptionRepository.findByUser(user);
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            List<Subscription> activeSubscriptions = subscriptionRepository.findByUserAndStatus(
                user, Subscription.SubscriptionStatus.ACTIVE);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            boolean hasActiveSubscription = subscriptionService.hasActiveSubscription(user);
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("userId", user.getId());
            response.put("email", user.getEmail());
            response.put("hasActiveSubscription", hasActiveSubscription);
            response.put("totalSubscriptions", allSubscriptions.size());
            response.put("activeSubscriptionsCount", activeSubscriptions.size());
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            List<Map<String, Object>> subscriptionsList = allSubscriptions.stream()
                .map(subscription -> {
                    Map<String, Object> subscriptionData = new HashMap<>();
                    subscriptionData.put("id", subscription.getId());
                    subscriptionData.put("planType", subscription.getPlanType() != null ? subscription.getPlanType().name() : "null");
                    subscriptionData.put("status", subscription.getStatus() != null ? subscription.getStatus().name() : "null");
                    subscriptionData.put("startDate", subscription.getStartDate() != null ? subscription.getStartDate().toString() : "null");
                    subscriptionData.put("endDate", subscription.getEndDate() != null ? subscription.getEndDate().toString() : "null");
                    subscriptionData.put("isActive", subscription.isActive());
                    subscriptionData.put("price", subscription.getPrice());
                    subscriptionData.put("createdAt", subscription.getCreatedAt() != null ? subscription.getCreatedAt().toString() : "null");
                    return subscriptionData;
                })
                .collect(Collectors.toList());
            
            response.put("subscriptions", subscriptionsList);
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: " + e.getMessage()
            ));
        }
    }
} 