package org.example.controller;

import org.example.entity.Subscription;
import org.example.entity.User;
import org.example.repository.SubscriptionRepository;
import org.example.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/api/public")
public class PublicController {
    
    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private SubscriptionRepository subscriptionRepository;
    
    /**
     * –ü—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
     * –ù–µ —Ç—Ä–µ–±—É–µ—Ç JWT —Ç–æ–∫–µ–Ω–∞
     */
    @PostMapping("/subscription/free")
    public ResponseEntity<?> createFreeSubscription(@RequestBody Map<String, String> requestBody) {
        try {
            System.out.println("\n\nüéÅ ===== –ü–£–ë–õ–ò–ß–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –ë–ï–°–ü–õ–ê–¢–ù–û–ô –ü–û–î–ü–ò–°–ö–ò =====");
            System.out.println("üì¶ Request body: " + requestBody);
            
            String userEmail = requestBody.get("email");
            if (userEmail == null || userEmail.trim().isEmpty()) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "Email –Ω–µ —É–∫–∞–∑–∞–Ω"
                ));
            }
            
            System.out.println("üìß Email: " + userEmail);
            
            // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
            Optional<User> userOpt = userRepository.findByEmail(userEmail);
            if (!userOpt.isPresent()) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                ));
            }
            
            User user = userOpt.get();
            System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: " + user.getEmail());
            
            // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            boolean hasActive = subscriptionRepository.findByUserAndStatus(user, Subscription.SubscriptionStatus.ACTIVE)
                .stream()
                .anyMatch(sub -> sub.getEndDate().isAfter(LocalDateTime.now()));
            
            if (hasActive) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
                ));
            }
            
            // –°–æ–∑–¥–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
            Subscription subscription = new Subscription();
            subscription.setUser(user);
            subscription.setPlanType(Subscription.PlanType.PLAN_FREE);
            subscription.setStatus(Subscription.SubscriptionStatus.ACTIVE);
            subscription.setStartDate(LocalDateTime.now());
            subscription.setEndDate(LocalDateTime.now().plusDays(7)); // 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ
            subscription.setPrice(0.0);
            subscription.setAutoRenew(false);
            subscription.setPaymentMethod("FREE");
            subscription.setCreatedAt(LocalDateTime.now());
            subscription.setUpdatedAt(LocalDateTime.now());
            
            subscription = subscriptionRepository.save(subscription);
            System.out.println("‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: " + subscription.getId());
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞");
            response.put("subscription", Map.of(
                "id", subscription.getId(),
                "planType", subscription.getPlanType().toString(),
                "startDate", subscription.getStartDate().toString(),
                "endDate", subscription.getEndDate().toString(),
                "status", subscription.getStatus().toString(),
                "price", subscription.getPrice()
            ));
            
            System.out.println("üéÅ ===== –ó–ê–í–ï–†–®–ï–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –ë–ï–°–ü–õ–ê–¢–ù–û–ô –ü–û–î–ü–ò–°–ö–ò =====\n\n");
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: " + e.getMessage()
            ));
        }
    }
    
    /**
     * –ü—É–±–ª–∏—á–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/subscription/debug")
    public ResponseEntity<?> debugUserSubscriptions(@RequestParam String email) {
        try {
            Optional<User> userOpt = userRepository.findByEmail(email);
            if (!userOpt.isPresent()) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                ));
            }
            
            User user = userOpt.get();
            var subscriptions = subscriptionRepository.findByUser(user);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "email", email,
                "subscriptionsCount", subscriptions.size(),
                "subscriptions", subscriptions
            ));
            
        } catch (Exception e) {
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞: " + e.getMessage()
            ));
        }
    }
} 