package org.example.controller;

import org.example.entity.User;
import org.example.repository.UserRepository;
import org.example.service.AuthService;
import org.example.service.SubscriptionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
@RequestMapping("/api/public")
@CrossOrigin(origins = {"http://localhost:3000", "http://localhost:3001", "http://localhost:3002", "http://localhost:5173"})
public class PublicApiController {

    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private SubscriptionService subscriptionService;
    
    @Autowired
    private AuthService authService;
    
    /**
     * –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞
     */
    @GetMapping("/api-key")
    public ResponseEntity<?> getApiKey(@RequestParam String email, @RequestParam(required = false) String token) {
        try {
            System.out.println("üîç Public API: Getting API key for user: " + email);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            User user = userRepository.findByEmail(email)
                    .orElse(null);
            
            if (user == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                ));
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            boolean hasSubscription = subscriptionService.hasActiveSubscription(user);
            if (!hasSubscription) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API –∫–ª—é—á—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
                    "requiresSubscription", true
                ));
            }
            
            boolean hasApiKey = user.getWildberriesApiKey() != null && !user.getWildberriesApiKey().trim().isEmpty();
            String apiKey = hasApiKey ? user.getWildberriesApiKey() : "";
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "hasApiKey", hasApiKey,
                "apiKey", apiKey
            ));
            
        } catch (Exception e) {
            System.err.println("‚ùå Error getting API key: " + e.getMessage());
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞: " + e.getMessage()
            ));
        }
    }
    
    /**
     * –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ API –∫–ª—é—á–∞
     */
    @PostMapping("/set-api-key")
    public ResponseEntity<?> setApiKey(
            @RequestParam(required = false) String email, 
            @RequestHeader(value = "Authorization", required = false) String authHeader,
            @RequestBody Map<String, String> request) {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ —Ç–æ–∫–µ–Ω–∞
            String userEmail = email;
            
            // –ï—Å–ª–∏ email –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ —Ç–æ–∫–µ–Ω–∞
            if (userEmail == null && authHeader != null && authHeader.startsWith("Bearer ")) {
                String token = authHeader.substring(7);
                userEmail = authService.extractEmailFromToken(token);
                System.out.println("üîê Extracted email from token: " + userEmail);
            }
            
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            if (userEmail == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å email –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
                ));
            }
            
            System.out.println("üîç Public API: Setting API key for user: " + userEmail);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            User user = userRepository.findByEmail(userEmail)
                    .orElse(null);
            
            if (user == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                ));
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            boolean hasSubscription = subscriptionService.hasActiveSubscription(user);
            if (!hasSubscription) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ API –∫–ª—é—á–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
                    "requiresSubscription", true
                ));
            }
            
            String apiKey = request.get("apiKey");
            if (apiKey == null || apiKey.trim().isEmpty()) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
                ));
            }
            
            user.setWildberriesApiKey(apiKey.trim());
            userRepository.save(user);
            
            System.out.println("‚úÖ Public API: API key set successfully for user: " + userEmail);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "API –∫–ª—é—á Wildberries —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            ));
            
        } catch (Exception e) {
            System.err.println("‚ùå Error setting API key: " + e.getMessage());
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ API –∫–ª—é—á–∞: " + e.getMessage()
            ));
        }
    }
    
    /**
     * –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è API –∫–ª—é—á–∞
     */
    @PostMapping("/remove-api-key")
    public ResponseEntity<?> removeApiKey(
            @RequestParam(required = false) String email,
            @RequestHeader(value = "Authorization", required = false) String authHeader) {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ —Ç–æ–∫–µ–Ω–∞
            String userEmail = email;
            
            // –ï—Å–ª–∏ email –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ —Ç–æ–∫–µ–Ω–∞
            if (userEmail == null && authHeader != null && authHeader.startsWith("Bearer ")) {
                String token = authHeader.substring(7);
                userEmail = authService.extractEmailFromToken(token);
                System.out.println("üîê Extracted email from token: " + userEmail);
            }
            
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            if (userEmail == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å email –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
                ));
            }
            
            System.out.println("üîç Public API: Removing API key for user: " + userEmail);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            User user = userRepository.findByEmail(userEmail)
                    .orElse(null);
            
            if (user == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                ));
            }
            
            user.setWildberriesApiKey(null);
            userRepository.save(user);
            
            System.out.println("‚úÖ Public API: API key removed successfully for user: " + userEmail);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "API –∫–ª—é—á —É–¥–∞–ª–µ–Ω"
            ));
            
        } catch (Exception e) {
            System.err.println("‚ùå Error removing API key: " + e.getMessage());
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è API –∫–ª—é—á–∞: " + e.getMessage()
            ));
        }
    }
} 