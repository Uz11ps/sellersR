package org.example.controller;

import org.example.dto.admin.*;
import org.example.entity.User;
import org.example.service.AdminService;
import org.example.service.JwtService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import jakarta.servlet.http.HttpServletRequest;
import java.util.Map;

@RestController
@RequestMapping("/admin")
@CrossOrigin(origins = "*")
public class AdminController {

    @Autowired
    private AdminService adminService;

    @Autowired
    private JwtService jwtService;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    @GetMapping("/stats")
    public ResponseEntity<AdminApiResponse<AdminStatsDto>> getStats(HttpServletRequest request) {
        try {
            System.out.println("üìä Admin: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            String token = jwtService.extractTokenFromRequest(request);
            if (token == null) {
                System.out.println("‚ùå Admin: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return ResponseEntity.ok(new AdminApiResponse<>(false, "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", null));
            }

            String userEmail = jwtService.extractUsername(token);
            if (userEmail == null) {
                System.out.println("‚ùå Admin: Email –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ —Ç–æ–∫–µ–Ω–∞");
                return ResponseEntity.ok(new AdminApiResponse<>(false, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω", null));
            }

            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            AdminStatsDto stats = adminService.getSystemStats();
            System.out.println("‚úÖ Admin: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: " + stats.getTotalUsers() + " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
            
            return ResponseEntity.ok(new AdminApiResponse<>(true, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞", stats));
            
        } catch (Exception e) {
            System.out.println("‚ùå Admin: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.ok(new AdminApiResponse<>(false, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + e.getMessage(), null));
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    @GetMapping("/users")
    public ResponseEntity<AdminApiResponse<Page<AdminUserDto>>> getUsers(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            @RequestParam(required = false) String search,
            HttpServletRequest request) {
        try {
            System.out.println("üë• Admin: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å—Ç—Ä–∞–Ω–∏—Ü–∞: " + page + ", —Ä–∞–∑–º–µ—Ä: " + size + ", –ø–æ–∏—Å–∫: " + search);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            String token = jwtService.extractTokenFromRequest(request);
            if (token == null) {
                return ResponseEntity.ok(new AdminApiResponse<>(false, "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", null));
            }

            Pageable pageable = PageRequest.of(page, size);
            Page<AdminUserDto> users = adminService.getUsers(pageable, search);
            
            System.out.println("‚úÖ Admin: –ü–æ–ª—É—á–µ–Ω–æ " + users.getContent().size() + " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
            return ResponseEntity.ok(new AdminApiResponse<>(true, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã", users));
            
        } catch (Exception e) {
            System.out.println("‚ùå Admin: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.ok(new AdminApiResponse<>(false, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + e.getMessage(), null));
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @PutMapping("/users/{userId}")
    public ResponseEntity<AdminApiResponse<AdminUserDto>> updateUser(
            @PathVariable Long userId,
            @RequestBody AdminUserUpdateDto updateDto,
            HttpServletRequest request) {
        try {
            System.out.println("üìù Admin: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: " + userId);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            String token = jwtService.extractTokenFromRequest(request);
            if (token == null) {
                return ResponseEntity.ok(new AdminApiResponse<>(false, "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", null));
            }

            AdminUserDto updatedUser = adminService.updateUser(userId, updateDto);
            System.out.println("‚úÖ Admin: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: " + updatedUser.getEmail());
            
            return ResponseEntity.ok(new AdminApiResponse<>(true, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω", updatedUser));
            
        } catch (Exception e) {
            System.out.println("‚ùå Admin: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.ok(new AdminApiResponse<>(false, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + e.getMessage(), null));
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @DeleteMapping("/users/{userId}")
    public ResponseEntity<AdminApiResponse<String>> deleteUser(
            @PathVariable Long userId,
            HttpServletRequest request) {
        try {
            System.out.println("üóëÔ∏è Admin: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: " + userId);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            String token = jwtService.extractTokenFromRequest(request);
            if (token == null) {
                return ResponseEntity.ok(new AdminApiResponse<>(false, "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", null));
            }

            adminService.deleteUser(userId);
            System.out.println("‚úÖ Admin: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω");
            
            return ResponseEntity.ok(new AdminApiResponse<>(true, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω", null));
            
        } catch (Exception e) {
            System.out.println("‚ùå Admin: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.ok(new AdminApiResponse<>(false, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + e.getMessage(), null));
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ API –ª–æ–≥–æ–≤
    @GetMapping("/api-logs")
    public ResponseEntity<AdminApiResponse<Page<AdminApiLogDto>>> getApiLogs(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "50") int size,
            @RequestParam(required = false) Long userId,
            HttpServletRequest request) {
        try {
            System.out.println("üìã Admin: –ó–∞–ø—Ä–æ—Å API –ª–æ–≥–æ–≤, —Å—Ç—Ä–∞–Ω–∏—Ü–∞: " + page + ", –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + userId);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            String token = jwtService.extractTokenFromRequest(request);
            if (token == null) {
                return ResponseEntity.ok(new AdminApiResponse<>(false, "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", null));
            }

            Pageable pageable = PageRequest.of(page, size);
            Page<AdminApiLogDto> logs = adminService.getApiLogs(pageable, userId);
            
            System.out.println("‚úÖ Admin: –ü–æ–ª—É—á–µ–Ω–æ " + logs.getContent().size() + " –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤");
            return ResponseEntity.ok(new AdminApiResponse<>(true, "–õ–æ–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã", logs));
            
        } catch (Exception e) {
            System.out.println("‚ùå Admin: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.ok(new AdminApiResponse<>(false, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + e.getMessage(), null));
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    @GetMapping("/system")
    public ResponseEntity<AdminApiResponse<Map<String, Object>>> getSystemInfo(HttpServletRequest request) {
        try {
            System.out.println("‚öôÔ∏è Admin: –ó–∞–ø—Ä–æ—Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            String token = jwtService.extractTokenFromRequest(request);
            if (token == null) {
                return ResponseEntity.ok(new AdminApiResponse<>(false, "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", null));
            }

            Map<String, Object> systemInfo = adminService.getSystemInfo();
            System.out.println("‚úÖ Admin: –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞");
            
            return ResponseEntity.ok(new AdminApiResponse<>(true, "–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞", systemInfo));
            
        } catch (Exception e) {
            System.out.println("‚ùå Admin: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.ok(new AdminApiResponse<>(false, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + e.getMessage(), null));
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏
    @PostMapping("/unit-economics")
    public ResponseEntity<AdminApiResponse<UnitEconomicsDto>> getUnitEconomics(
            @RequestParam(value = "days", defaultValue = "30") int days,
            HttpServletRequest request) {
        try {
            System.out.println("üí∞ Admin: –ó–∞–ø—Ä–æ—Å —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏ –∑–∞ " + days + " –¥–Ω–µ–π");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            String token = jwtService.extractTokenFromRequest(request);
            if (token == null) {
                return ResponseEntity.ok(new AdminApiResponse<>(false, "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", null));
            }

            String userEmail = jwtService.extractUsername(token);
            UnitEconomicsDto unitEconomics = adminService.getUnitEconomics(userEmail, days);
            System.out.println("‚úÖ Admin: –Æ–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞");
            
            return ResponseEntity.ok(new AdminApiResponse<>(true, "–Æ–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞", unitEconomics));
            
        } catch (Exception e) {
            System.out.println("‚ùå Admin: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.ok(new AdminApiResponse<>(false, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + e.getMessage(), null));
        }
    }
} 
 
 