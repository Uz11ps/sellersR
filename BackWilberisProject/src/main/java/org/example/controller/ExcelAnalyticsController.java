package org.example.controller;

import com.fasterxml.jackson.databind.JsonNode;
import org.example.entity.*;
import org.example.repository.*;
import org.example.service.WildberriesApiService;
import org.example.service.SubscriptionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/excel-analytics")
@CrossOrigin(origins = {"http://localhost:3000", "http://localhost:3001", "http://localhost:3002"})
public class ExcelAnalyticsController {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private WildberriesApiService wildberriesApiService;

    @Autowired
    private UnitEconomicsRepository unitEconomicsRepository;

    @Autowired
    private AnalyticsDataRepository analyticsDataRepository;

    @Autowired
    private WeeklyFinancialReportRepository weeklyFinancialReportRepository;

    @Autowired
    private PromotionsTrackingRepository promotionsTrackingRepository;

    @Autowired
    private AdvertisingCampaignRepository advertisingCampaignRepository;

    @Autowired
    private SupplyPlanningRepository supplyPlanningRepository;

    @Autowired
    private SellerRepository sellerRepository;

    @Autowired
    private SubscriptionService subscriptionService;

    /**
     * Helper –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private User getUserFromAuth(Authentication auth) {
        String userEmail = auth.getName();
        return userRepository.findByEmail(userEmail)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
    }

    /**
     * Helper –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
     */
    private ResponseEntity<?> checkSubscriptionAccess(User user) {
        if (!subscriptionService.hasActiveSubscription(user)) {
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
                "requiresSubscription", true
            ));
        }
        return null; // –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω
    }

    /**
     * Helper –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞ (–ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ)
     */
    private Seller getSellerFromUser(User user) {
        List<Seller> sellers = sellerRepository.findByUserAndIsActiveTrue(user);
        if (sellers.isEmpty()) {
            throw new RuntimeException("–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        return sellers.get(0); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞
    }

    /**
     * –§–ò–ù–ê–ù–°–û–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê - –∞–Ω–∞–ª–æ–≥ –ª–∏—Å—Ç–∞ "–§–∏–Ω —Ç–∞–±–ª–∏—Ü–∞" –∏–∑ Excel
     * –†–µ–∞–ª–∏–∑—É–µ—Ç –í–ü–†-–ª–æ–≥–∏–∫—É –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
     * –ò–°–ü–û–õ–¨–ó–£–ï–¢ –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó API WILDBERRIES
     */
    @GetMapping("/financial-table")
    public ResponseEntity<?> getFinancialTable(
            Authentication auth,
            @RequestParam(value = "days", defaultValue = "30") int days) {
        try {
            User user = getUserFromAuth(auth);
            
            // üîí –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò
            ResponseEntity<?> subscriptionCheck = checkSubscriptionAccess(user);
            if (subscriptionCheck != null) return subscriptionCheck;
            
            if (user.getWildberriesApiKey() == null || user.getWildberriesApiKey().trim().isEmpty()) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "API –∫–ª—é—á Wildberries –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                ));
            }

            LocalDate endDate = LocalDate.now();
            LocalDate startDate = endDate.minusDays(days);

            // üî• –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï: –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –∏–∑ WB API
            JsonNode financeReport = wildberriesApiService.getFinanceReport(
                user.getWildberriesApiKey(), startDate, endDate);
            
            // üî• –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï: –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
            JsonNode salesReport = wildberriesApiService.getSalesReport(
                user.getWildberriesApiKey(), startDate, endDate);

            // üî• –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï: –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
            JsonNode stocksReport = wildberriesApiService.getStocksReport(
                user.getWildberriesApiKey(), startDate);

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏ –∏–∑ –ë–î
            Seller seller = getSellerFromUser(user);
            List<UnitEconomics> unitEconomics = unitEconomicsRepository.findBySellerOrderByCalculationDateDesc(seller);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            List<WeeklyFinancialReport> weeklyReports = weeklyFinancialReportRepository.findBySellerOrderByDatePeriodDesc(seller);
            
            List<Map<String, Object>> financialTableData = new ArrayList<>();
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
            Map<String, Map<String, Object>> apiDataByArticle = groupApiDataByArticle(financeReport, salesReport, stocksReport);
            
            for (int i = 0; i < unitEconomics.size(); i++) {
                UnitEconomics ue = unitEconomics.get(i);
                Map<String, Object> row = new HashMap<>();
                
                // –ù—É–º–µ—Ä–∞—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ (—Å—Ç–æ–ª–±–µ—Ü A)
                row.put("rowNumber", i + 1);
                
                // –í–ü–† –¥–∞–Ω–Ω—ã–µ –∏–∑ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏ (—Å—Ç–æ–ª–±—Ü—ã B-E)
                row.put("wbArticle", ue.getWbArticle());
                row.put("supplierArticle", ue.getSupplierArticle());
                row.put("grossProfit", ue.getGrossProfit());
                row.put("costPrice", ue.getCostPrice());
                
                // üî• –†–ï–ê–õ–¨–ù–´–ï –†–ê–°–ß–ï–¢–´: –§–æ—Ä–º—É–ª—ã –∫–∞–∫ –≤ Excel, –Ω–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ API
                Map<String, Object> calculations = calculateRealFinancialMetrics(ue, apiDataByArticle.get(ue.getWbArticle()));
                row.putAll(calculations);
                
                financialTableData.add(row);
            }
            
            // –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–æ (–∞–Ω–∞–ª–∏–∑ —Å 29 —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –≤ Excel)
            Map<String, Object> pivotTableData = createRealWeeklyPivotTable(financeReport, weeklyReports);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", Map.of(
                    "financialTable", financialTableData,
                    "pivotTable", pivotTableData,
                    "weeklyReports", getWeeklyReportSummary(weeklyReports),
                    "apiDataSummary", createApiDataSummary(financeReport, salesReport, stocksReport)
                )
            ));
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã: " + e.getMessage()
            ));
        }
    }

    /**
     * ABC –ê–ù–ê–õ–ò–ó —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ –°–£–ú–ú–ï–°–õ–ò - –∞–Ω–∞–ª–æ–≥ –ª–∏—Å—Ç–∞ "–ê–í–° –∞–Ω–∞–ª–∏–∑"
     * –ò–°–ü–û–õ–¨–ó–£–ï–¢ –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó API "–í–û–†–û–ù–ö–ê –ü–†–û–î–ê–ñ –ú–ï–°–Ø–¶"
     */
    @GetMapping("/abc-analysis-enhanced")
    public ResponseEntity<?> getEnhancedAbcAnalysis(
            Authentication auth,
            @RequestParam(value = "days", defaultValue = "30") int days) {
        try {
            User user = getUserFromAuth(auth);
            
            // üîí –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò
            ResponseEntity<?> subscriptionCheck = checkSubscriptionAccess(user);
            if (subscriptionCheck != null) return subscriptionCheck;
            
            if (user.getWildberriesApiKey() == null || user.getWildberriesApiKey().trim().isEmpty()) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "API –∫–ª—é—á Wildberries –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                ));
            }

            LocalDate endDate = LocalDate.now();
            LocalDate startDate = endDate.minusDays(days);

            // üî• –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ "–≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂ –º–µ—Å—è—Ü" –∏–∑ API
            JsonNode salesReport = wildberriesApiService.getSalesReport(user.getWildberriesApiKey(), startDate, endDate);
            JsonNode ordersReport = wildberriesApiService.getOrdersReport(user.getWildberriesApiKey(), startDate);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Å–∫–ª–µ–µ–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –ë–î, –∏–Ω–∞—á–µ –∏–∑ –∞—Ä—Ç–∏–∫—É–ª–æ–≤)
            Seller seller = getSellerFromUser(user);
            List<UnitEconomics> unitEconomics = unitEconomicsRepository.findBySellerOrderByCalculationDateDesc(seller);
            
            // üî• –†–ï–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–æ–Ω–∫—É –ø—Ä–æ–¥–∞–∂ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö API
            List<Map<String, Object>> salesFunnelData = createRealSalesFunnelData(salesReport, ordersReport, unitEconomics);
            
            List<Map<String, Object>> abcAnalysisData = new ArrayList<>();
            
            for (int i = 0; i < salesFunnelData.size(); i++) {
                Map<String, Object> salesRow = salesFunnelData.get(i);
                Map<String, Object> row = new HashMap<>();
                
                // –°—Ç–æ–ª–±–µ—Ü A - –Ω—É–º–µ—Ä–∞—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
                row.put("rowNumber", i + 1);
                
                // –í–ü–† –¥–∞–Ω–Ω—ã–µ (—Å—Ç–æ–ª–±—Ü—ã B-G) - —Ç–µ–ø–µ—Ä—å –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                String wbArticle = (String) salesRow.get("wbArticle");
                String clusterGroup = (String) salesRow.get("clusterGroup");
                
                row.put("wbArticle", wbArticle);
                row.put("supplierArticle", salesRow.get("supplierArticle"));
                row.put("productName", salesRow.get("productName"));
                row.put("clusterGroup", clusterGroup);
                row.put("ordersCount", salesRow.get("ordersCount"));
                row.put("averagePrice", salesRow.get("averagePrice"));
                row.put("revenue", salesRow.get("revenue"));
                
                // üî• –§–û–†–ú–£–õ–ê –°–£–ú–ú–ï–°–õ–ò –∏–∑ Excel - % –≤—ã—Ä—É—á–∫–∏ –≤ –≥—Ä—É–ø–ø–µ (—Å—Ç–æ–ª–±–µ—Ü H)
                BigDecimal revenue = (BigDecimal) salesRow.get("revenue");
                BigDecimal groupRevenue = calculateGroupRevenue(salesFunnelData, clusterGroup);
                BigDecimal revenuePercent = groupRevenue.compareTo(BigDecimal.ZERO) > 0 
                    ? revenue.divide(groupRevenue, 4, RoundingMode.HALF_UP) 
                    : BigDecimal.ZERO;
                row.put("revenuePercentInGroup", revenuePercent);
                
                // üî• –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π % –≤—ã—Ä—É—á–∫–∏ –≤ –≥—Ä—É–ø–ø–µ (—Å—Ç–æ–ª–±–µ—Ü I)
                BigDecimal cumulativePercent = calculateCumulativePercent(abcAnalysisData, clusterGroup, revenuePercent);
                row.put("cumulativeRevenuePercent", cumulativePercent);
                
                // üî• –°—Ä–ó–Ω–∞—á–ï—Å–ª–∏ –∏–∑ Excel - —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ (—Å—Ç–æ–ª–±–µ—Ü J)
                BigDecimal avgRevenueInGroup = calculateAverageRevenueInGroup(salesFunnelData, clusterGroup);
                row.put("avgRevenueInGroup", avgRevenueInGroup);
                
                // üî• –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ (—Å—Ç–æ–ª–±–µ—Ü K)
                BigDecimal deviationCoeff = avgRevenueInGroup.compareTo(BigDecimal.ZERO) > 0 
                    ? revenue.divide(avgRevenueInGroup, 4, RoundingMode.HALF_UP) 
                    : BigDecimal.ZERO;
                row.put("deviationCoefficient", deviationCoeff);
                
                // üî• –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã ABC (—Å—Ç–æ–ª–±–µ—Ü L) - —Ñ–æ—Ä–º—É–ª–∞ –∏–∑ Excel
                String abcGroup = assignAbcGroup(deviationCoeff);
                row.put("abcGroup", abcGroup);
                
                abcAnalysisData.add(row);
            }
            
            // –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            Map<String, Object> overallAnalysis = createOverallAbcAnalysis(abcAnalysisData);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", Map.of(
                    "abcAnalysis", abcAnalysisData,
                    "overallAnalysis", overallAnalysis,
                    "groupSummary", createGroupSummary(abcAnalysisData),
                    "apiDataSummary", Map.of(
                        "salesRecords", salesReport != null && salesReport.isArray() ? salesReport.size() : 0,
                        "ordersRecords", ordersReport != null && ordersReport.isArray() ? ordersReport.size() : 0
                    )
                )
            ));
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ABC –∞–Ω–∞–ª–∏–∑–∞: " + e.getMessage()
            ));
        }
    }

    /**
     * –ü–õ–ê–ù –ü–û–°–¢–ê–í–û–ö - –∞–Ω–∞–ª–æ–≥ –ª–∏—Å—Ç–∞ "–ü–ª–∞–Ω –ø–æ—Å—Ç–∞–≤–æ–∫"
     * –ò–°–ü–û–õ–¨–ó–£–ï–¢ –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó API –û–°–¢–ê–¢–ö–û–í –ò –ó–ê–ö–ê–ó–û–í
     */
    @GetMapping("/supply-planning")
    public ResponseEntity<?> getSupplyPlanning(
            Authentication auth,
            @RequestParam(value = "days", defaultValue = "30") int days) {
        try {
            User user = getUserFromAuth(auth);
            
            // üîí –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò
            ResponseEntity<?> subscriptionCheck = checkSubscriptionAccess(user);
            if (subscriptionCheck != null) return subscriptionCheck;
            
            if (user.getWildberriesApiKey() == null || user.getWildberriesApiKey().trim().isEmpty()) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "API –∫–ª—é—á Wildberries –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                ));
            }

            LocalDate endDate = LocalDate.now();
            LocalDate startDate = endDate.minusDays(days);

            // üî• –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï: –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –∏ –∑–∞–∫–∞–∑—ã –∏–∑ API
            JsonNode stocksReport = wildberriesApiService.getStocksReport(user.getWildberriesApiKey(), startDate);
            JsonNode ordersReport = wildberriesApiService.getOrdersReport(user.getWildberriesApiKey(), startDate);
            
            // üî• –†–ï–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –ø–æ—Å—Ç–∞–≤–æ–∫ –∏–∑ –¥–∞–Ω–Ω—ã—Ö API
            List<Map<String, Object>> planningData = createRealSupplyPlanningData(stocksReport, ordersReport, days);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", planningData,
                "apiDataSummary", Map.of(
                    "stocksRecords", stocksReport != null && stocksReport.isArray() ? stocksReport.size() : 0,
                    "ordersRecords", ordersReport != null && ordersReport.isArray() ? ordersReport.size() : 0
                )
            ));
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–æ—Å—Ç–∞–≤–æ–∫: " + e.getMessage()
            ));
        }
    }

    /**
     * –£–ß–ï–¢ –ê–ö–¶–ò–ô - –∞–Ω–∞–ª–æ–≥ –ª–∏—Å—Ç–∞ "–£—á–µ—Ç –∞–∫—Ü–∏–π"
     * –ò–°–ü–û–õ–¨–ó–£–ï–¢ –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó –ë–î –ò API
     */
    @GetMapping("/promotions-tracking")
    public ResponseEntity<?> getPromotionsTracking(
            Authentication auth,
            @RequestParam(value = "days", defaultValue = "30") int days) {
        try {
            User user = getUserFromAuth(auth);
            
            // üîí –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò
            ResponseEntity<?> subscriptionCheck = checkSubscriptionAccess(user);
            if (subscriptionCheck != null) return subscriptionCheck;

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–π –∏–∑ –ë–î
            Seller seller = getSellerFromUser(user);
            List<PromotionsTracking> promotions = promotionsTrackingRepository.findBySellerOrderByCreatedAtDesc(seller);
            
            // üî• –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï: –î–æ–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ API –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–∞
            JsonNode salesReport = null;
            if (user.getWildberriesApiKey() != null && !user.getWildberriesApiKey().trim().isEmpty()) {
                LocalDate startDate = LocalDate.now().minusDays(days);
                LocalDate endDate = LocalDate.now();
                salesReport = wildberriesApiService.getSalesReport(user.getWildberriesApiKey(), startDate, endDate);
            }
            
            List<Map<String, Object>> promotionsData = new ArrayList<>();
            
            for (PromotionsTracking promo : promotions) {
                Map<String, Object> row = new HashMap<>();
                
                // –í–ü–† –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                row.put("wbArticle", promo.getWbArticle());
                row.put("supplierArticle", promo.getSupplierArticle());
                row.put("productName", promo.getGrouping() != null ? promo.getGrouping() : "–¢–æ–≤–∞—Ä " + promo.getWbArticle());
                row.put("promotionType", promo.getAction() != null ? promo.getAction() : "–ê–∫—Ü–∏—è");
                
                // –í–ü–† –¥–∞–Ω–Ω—ã–µ —Å –ª–∏—Å—Ç–æ–≤ –∞–∫—Ü–∏–π (—Å—Ç–æ–ª–±–µ—Ü J)
                BigDecimal promotionPrice = promo.getPriceForPromotionParticipation();
                row.put("promotionPrice", promotionPrice);
                
                // üî• –†–ï–ê–õ–¨–ù–ê–Ø –§–û–†–ú–£–õ–ê: –í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –æ—Ç —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏ (—Å—Ç–æ–ª–±–µ—Ü K)
                BigDecimal grossProfitFromPromotion = calculateRealGrossProfitFromPromotion(promo, salesReport);
                row.put("grossProfitFromPromotion", grossProfitFromPromotion);
                
                promotionsData.add(row);
            }
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", promotionsData,
                "apiDataSummary", Map.of(
                    "promotionsCount", promotions.size(),
                    "salesRecords", salesReport != null && salesReport.isArray() ? salesReport.size() : 0
                )
            ));
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ—Ç–∞ –∞–∫—Ü–∏–π: " + e.getMessage()
            ));
        }
    }

    /**
     * –†–ö –¢–ê–ë–õ–ò–¶–ê - —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
     * –ò–°–ü–û–õ–¨–ó–£–ï–¢ –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó –ë–î –ò API –†–ï–ö–õ–ê–ú–´
     */
    @GetMapping("/advertising-campaigns-table")
    public ResponseEntity<?> getAdvertisingCampaignsTable(
            Authentication auth,
            @RequestParam(value = "days", defaultValue = "30") int days) {
        try {
            User user = getUserFromAuth(auth);
            
            // üîí –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò
            ResponseEntity<?> subscriptionCheck = checkSubscriptionAccess(user);
            if (subscriptionCheck != null) return subscriptionCheck;

            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–º–ø–∞–Ω–∏–∏ –∏–∑ –ë–î
            Seller seller = getSellerFromUser(user);
            List<AdvertisingCampaign> campaigns = advertisingCampaignRepository.findBySeller(seller);
            
            // üî• –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï: –î–æ–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ API –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–∞
            JsonNode advertData = null;
            if (user.getWildberriesApiKey() != null && !user.getWildberriesApiKey().trim().isEmpty()) {
                LocalDate startDate = LocalDate.now().minusDays(days);
                advertData = wildberriesApiService.getAdvertCampaignsData(user.getWildberriesApiKey(), startDate);
            }
            
            List<Map<String, Object>> campaignsData = new ArrayList<>();
            
            for (AdvertisingCampaign campaign : campaigns) {
                Map<String, Object> row = new HashMap<>();
                
                // –í–ü–† –¥–∞–Ω–Ω—ã–µ –¥–æ —Å—Ç–æ–ª–±—Ü–∞ D
                row.put("wbArticle", campaign.getWbArticle());
                row.put("supplierArticle", campaign.getSupplierArticle());
                row.put("campaignName", campaign.getGrouping() != null ? campaign.getGrouping() : "–ö–∞–º–ø–∞–Ω–∏—è " + campaign.getWbArticle());
                row.put("campaignType", campaign.getIndicator() != null ? campaign.getIndicator() : "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å");
                
                // üî• –†–ï–ê–õ–¨–ù–´–ï –†–ê–°–ß–ï–¢–´: –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞–∫ –≤ Excel, —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ API
                Map<String, Object> calculations = calculateRealAdvertisingMetrics(campaign, advertData);
                row.putAll(calculations);
                
                campaignsData.add(row);
            }
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", campaignsData,
                "apiDataSummary", Map.of(
                    "campaignsCount", campaigns.size(),
                    "advertRecords", advertData != null && advertData.isArray() ? advertData.size() : 0
                )
            ));
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –†–ö —Ç–∞–±–ª–∏—Ü—ã: " + e.getMessage()
            ));
        }
    }

    // üî• –†–ï–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–ù–ù–´–• –ò–ó API - –ó–ê–ú–ï–ù–ò–õ–ò –í–°–ï –ó–ê–ì–õ–£–®–ö–ò

    /**
     * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–Ω—ã—Ö API –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º –¥–ª—è –í–ü–†-–ª–æ–≥–∏–∫–∏
     */
    private Map<String, Map<String, Object>> groupApiDataByArticle(JsonNode financeReport, JsonNode salesReport, JsonNode stocksReport) {
        Map<String, Map<String, Object>> grouped = new HashMap<>();
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç
        if (financeReport != null && financeReport.isArray()) {
            for (JsonNode item : financeReport) {
                String article = extractArticle(item);
                if (article != null) {
                    Map<String, Object> data = grouped.computeIfAbsent(article, k -> new HashMap<>());
                    
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if (item.has("quantity")) data.put("sales", item.get("quantity").asInt());
                    if (item.has("forPay")) data.put("toPayForProduct", new BigDecimal(item.get("forPay").asText()));
                    if (item.has("deliveryAmount")) data.put("logistics", new BigDecimal(item.get("deliveryAmount").asText()));
                    if (item.has("penalty")) data.put("penalty", new BigDecimal(item.get("penalty").asText()));
                    if (item.has("additionalPayment")) data.put("additionalPayment", new BigDecimal(item.get("additionalPayment").asText()));
                }
            }
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
        if (salesReport != null && salesReport.isArray()) {
            for (JsonNode item : salesReport) {
                String article = extractArticle(item);
                if (article != null) {
                    Map<String, Object> data = grouped.computeIfAbsent(article, k -> new HashMap<>());
                    
                    if (item.has("quantity")) data.put("ordersCount", item.get("quantity").asInt());
                    if (item.has("totalPrice")) data.put("revenue", new BigDecimal(item.get("totalPrice").asText()));
                }
            }
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        if (stocksReport != null && stocksReport.isArray()) {
            for (JsonNode item : stocksReport) {
                String article = extractArticle(item);
                if (article != null) {
                    Map<String, Object> data = grouped.computeIfAbsent(article, k -> new HashMap<>());
                    
                    if (item.has("quantity")) data.put("currentStock", item.get("quantity").asInt());
                    if (item.has("Price")) data.put("averagePrice", new BigDecimal(item.get("Price").asText()));
                }
            }
        }
        
        return grouped;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ –∏–∑ JSON –æ–±—ä–µ–∫—Ç–∞ API (—Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è –≤ —Ä–∞–∑–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö)
     */
    private String extractArticle(JsonNode item) {
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª–µ–π –∞—Ä—Ç–∏–∫—É–ª–∞ –≤ API WB
        if (item.has("supplierArticle")) return item.get("supplierArticle").asText();
        if (item.has("sa")) return item.get("sa").asText();
        if (item.has("vendorCode")) return item.get("vendorCode").asText();
        if (item.has("article")) return item.get("article").asText();
        return null;
    }

    /**
     * –†–ï–ê–õ–¨–ù–´–ï –†–ê–°–ß–ï–¢–´ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ API (–∑–∞–º–µ–Ω–∞ –∑–∞–≥–ª—É—à–µ–∫)
     */
    private Map<String, Object> calculateRealFinancialMetrics(UnitEconomics ue, Map<String, Object> apiData) {
        Map<String, Object> metrics = new HashMap<>();
        
        if (apiData == null) {
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω—É–ª–∏
            metrics.put("orders", 0);
            metrics.put("sales", 0);
            metrics.put("toPayForProduct", BigDecimal.ZERO);
            metrics.put("logistics", BigDecimal.ZERO);
            metrics.put("toPay", BigDecimal.ZERO);
            metrics.put("costOfSold", BigDecimal.ZERO);
            metrics.put("netProfit", BigDecimal.ZERO);
            return metrics;
        }
        
        // üî• –†–ï–ê–õ–¨–ù–´–ï –§–û–†–ú–£–õ–´ –∏–∑ Excel —Å –¥–∞–Ω–Ω—ã–º–∏ API:
        
        // –ó–∞–∫–∞–∑—ã –∏ –ø—Ä–æ–¥–∞–∂–∏ –∏–∑ API
        int orders = (Integer) apiData.getOrDefault("ordersCount", 0);
        int sales = (Integer) apiData.getOrDefault("sales", 0);
        
        // –ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –∑–∞ —Ç–æ–≤–∞—Ä –∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ API
        BigDecimal toPayForProduct = (BigDecimal) apiData.getOrDefault("toPayForProduct", BigDecimal.ZERO);
        
        // –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ API
        BigDecimal logistics = (BigDecimal) apiData.getOrDefault("logistics", BigDecimal.ZERO);
        
        // üî• –§–û–†–ú–£–õ–ê EXCEL: –ö –≤—ã–ø–ª–∞—Ç–µ = –∫ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é - –ª–æ–≥–∏—Å—Ç–∏–∫–∞
        BigDecimal toPay = toPayForProduct.subtract(logistics);
        
        // üî• –§–û–†–ú–£–õ–ê EXCEL: –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ = —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –µ–¥–∏–Ω–∏—Ü—ã * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂
        BigDecimal costOfSold = ue.getCostPrice() != null 
            ? ue.getCostPrice().multiply(BigDecimal.valueOf(sales))
            : BigDecimal.ZERO;
        
        // üî• –§–û–†–ú–£–õ–ê EXCEL: –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å = –∫ –≤—ã–ø–ª–∞—Ç–µ - —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        BigDecimal netProfit = toPay.subtract(costOfSold);
        
        metrics.put("orders", orders);
        metrics.put("sales", sales);
        metrics.put("toPayForProduct", toPayForProduct);
        metrics.put("logistics", logistics);
        metrics.put("toPay", toPay);
        metrics.put("costOfSold", costOfSold);
        metrics.put("netProfit", netProfit);
        
        return metrics;
    }

    /**
     * –†–ï–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂ –∏–∑ –¥–∞–Ω–Ω—ã—Ö API (–∑–∞–º–µ–Ω–∞ generateSalesFunnelData)
     */
    private List<Map<String, Object>> createRealSalesFunnelData(JsonNode salesReport, JsonNode ordersReport, List<UnitEconomics> unitEconomics) {
        List<Map<String, Object>> salesFunnelData = new ArrayList<>();
        Map<String, Map<String, Object>> salesByArticle = new HashMap<>();
        Map<String, Map<String, Object>> ordersByArticle = new HashMap<>();
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
        if (salesReport != null && salesReport.isArray()) {
            for (JsonNode item : salesReport) {
                String article = extractArticle(item);
                if (article != null) {
                    Map<String, Object> data = new HashMap<>();
                    if (item.has("quantity")) data.put("sales", item.get("quantity").asInt());
                    if (item.has("totalPrice")) data.put("revenue", new BigDecimal(item.get("totalPrice").asText()));
                    if (item.has("price")) data.put("averagePrice", new BigDecimal(item.get("price").asText()));
                    salesByArticle.put(article, data);
                }
            }
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
        if (ordersReport != null && ordersReport.isArray()) {
            for (JsonNode item : ordersReport) {
                String article = extractArticle(item);
                if (article != null) {
                    Map<String, Object> data = new HashMap<>();
                    if (item.has("quantity")) data.put("orders", item.get("quantity").asInt());
                    ordersByArticle.put(article, data);
                }
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å–∫–ª–µ–π–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±—Ä–µ–Ω–¥–æ–≤/–∫–∞—Ç–µ–≥–æ—Ä–∏–π (–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É)
        Map<String, String> articleToCluster = createClusterMapping(unitEconomics);
        
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ—Ä–æ–Ω–∫–∏
        Set<String> allArticles = new HashSet<>();
        allArticles.addAll(salesByArticle.keySet());
        allArticles.addAll(ordersByArticle.keySet());
        
        for (String article : allArticles) {
            Map<String, Object> row = new HashMap<>();
            
            row.put("wbArticle", article);
            row.put("supplierArticle", "SUP_" + article);
            
            // –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–µ
            String productName = unitEconomics.stream()
                .filter(ue -> article.equals(ue.getWbArticle()))
                .findFirst()
                .map(ue -> "–¢–æ–≤–∞—Ä " + ue.getWbArticle())
                .orElse("–¢–æ–≤–∞—Ä " + article);
            row.put("productName", productName);
            
            // –°–∫–ª–µ–π–∫–∞ (–≥—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤)
            row.put("clusterGroup", articleToCluster.getOrDefault(article, "–ì—Ä—É–ø–ø–∞_" + (article.hashCode() % 3 + 1)));
            
            // –î–∞–Ω–Ω—ã–µ –∏–∑ API
            Map<String, Object> salesData = salesByArticle.getOrDefault(article, new HashMap<>());
            Map<String, Object> ordersData = ordersByArticle.getOrDefault(article, new HashMap<>());
            
            row.put("ordersCount", BigDecimal.valueOf((Integer) ordersData.getOrDefault("orders", 0)));
            row.put("averagePrice", (BigDecimal) salesData.getOrDefault("averagePrice", BigDecimal.valueOf(1000)));
            row.put("revenue", (BigDecimal) salesData.getOrDefault("revenue", BigDecimal.ZERO));
            
            salesFunnelData.add(row);
        }
        
        return salesFunnelData;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∫ —Å–∫–ª–µ–π–∫–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏
     */
    private Map<String, String> createClusterMapping(List<UnitEconomics> unitEconomics) {
        Map<String, String> mapping = new HashMap<>();
        
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
        for (UnitEconomics ue : unitEconomics) {
            if (ue.getWbArticle() != null) {
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–µ—Ä–≤–æ–π —Ü–∏—Ñ—Ä–µ –∞—Ä—Ç–∏–∫—É–ª–∞ (–ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞)
                String firstChar = ue.getWbArticle().length() > 0 ? ue.getWbArticle().substring(0, 1) : "0";
                mapping.put(ue.getWbArticle(), "–°–∫–ª–µ–π–∫–∞_" + firstChar);
            }
        }
        
        return mapping;
    }

    /**
     * –†–ï–ê–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞–Ω–∞ –ø–æ—Å—Ç–∞–≤–æ–∫ –∏–∑ –¥–∞–Ω–Ω—ã—Ö API
     */
    private List<Map<String, Object>> createRealSupplyPlanningData(JsonNode stocksReport, JsonNode ordersReport, int planDays) {
        List<Map<String, Object>> planningData = new ArrayList<>();
        Map<String, Integer> stocksByArticle = new HashMap<>();
        Map<String, Integer> ordersByArticle = new HashMap<>();
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        if (stocksReport != null && stocksReport.isArray()) {
            for (JsonNode item : stocksReport) {
                String article = extractArticle(item);
                if (article != null && item.has("quantity")) {
                    stocksByArticle.put(article, item.get("quantity").asInt());
                }
            }
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å
        if (ordersReport != null && ordersReport.isArray()) {
            for (JsonNode item : ordersReport) {
                String article = extractArticle(item);
                if (article != null && item.has("quantity")) {
                    ordersByArticle.merge(article, item.get("quantity").asInt(), Integer::sum);
                }
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –ø–æ—Å—Ç–∞–≤–æ–∫
        Set<String> allArticles = new HashSet<>();
        allArticles.addAll(stocksByArticle.keySet());
        allArticles.addAll(ordersByArticle.keySet());
        
        for (String article : allArticles) {
            Map<String, Object> row = new HashMap<>();
            
            row.put("wbArticle", article);
            row.put("supplierArticle", "SUP_" + article);
            row.put("productName", "–¢–æ–≤–∞—Ä " + article);
            
            int currentStock = stocksByArticle.getOrDefault(article, 0);
            int totalOrders = ordersByArticle.getOrDefault(article, 0);
            
            // üî• –§–û–†–ú–£–õ–ê EXCEL: –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å = –æ–±—â–∏–µ –∑–∞–∫–∞–∑—ã / –ø–µ—Ä–∏–æ–¥
            BigDecimal ordersPerDay = totalOrders > 0 
                ? BigDecimal.valueOf(totalOrders).divide(BigDecimal.valueOf(30), 2, RoundingMode.HALF_UP)
                : BigDecimal.valueOf(1); // –ú–∏–Ω–∏–º—É–º 1 –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
            
            row.put("currentStock", BigDecimal.valueOf(currentStock));
            row.put("ordersPerDay", ordersPerDay);
            
            // üî• –§–û–†–ú–£–õ–ê EXCEL: –¥–Ω–µ–π –æ—Å—Ç–∞—Ç–∫–∞ = —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ / –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å
            BigDecimal daysLeft = ordersPerDay.compareTo(BigDecimal.ZERO) > 0 
                ? BigDecimal.valueOf(currentStock).divide(ordersPerDay, 2, RoundingMode.HALF_UP)
                : BigDecimal.valueOf(999); // –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤
            
            row.put("daysLeft", daysLeft);
            
            // üî• –§–û–†–ú–£–õ–ê EXCEL: –Ω—É–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å = (–∑–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å * –ø–ª–∞–Ω –¥–Ω–µ–π) - —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫
            BigDecimal planQuantity = ordersPerDay.multiply(BigDecimal.valueOf(planDays));
            BigDecimal needToOrder = planQuantity.subtract(BigDecimal.valueOf(currentStock));
            row.put("needToOrder", needToOrder.max(BigDecimal.ZERO));
            
            // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.0)
            BigDecimal seasonCoeff = BigDecimal.valueOf(1.0);
            BigDecimal finalOrderQuantity = needToOrder.multiply(seasonCoeff);
            row.put("finalOrderQuantity", finalOrderQuantity.max(BigDecimal.ZERO));
            
            planningData.add(row);
        }
        
        return planningData;
    }

    /**
     * –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞—Å—á–µ—Ç–æ–≤ (–°–£–ú–ú–ï–°–õ–ò, –∫—É–º—É–ª—è—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ–º–∏ –∂–µ
     */
    private BigDecimal calculateGroupRevenue(List<Map<String, Object>> data, String clusterGroup) {
        return data.stream()
                .filter(row -> clusterGroup.equals(row.get("clusterGroup")))
                .map(row -> (BigDecimal) row.get("revenue"))
                .reduce(BigDecimal.ZERO, BigDecimal::add);
    }

    private BigDecimal calculateCumulativePercent(List<Map<String, Object>> processedData, String clusterGroup, BigDecimal currentPercent) {
        BigDecimal cumulative = processedData.stream()
                .filter(row -> clusterGroup.equals(row.get("clusterGroup")))
                .map(row -> (BigDecimal) row.get("revenuePercentInGroup"))
                .reduce(BigDecimal.ZERO, BigDecimal::add);
        return cumulative.add(currentPercent);
    }

    private BigDecimal calculateAverageRevenueInGroup(List<Map<String, Object>> data, String clusterGroup) {
        List<BigDecimal> groupRevenues = data.stream()
                .filter(row -> clusterGroup.equals(row.get("clusterGroup")))
                .map(row -> (BigDecimal) row.get("revenue"))
                .collect(Collectors.toList());
        
        if (groupRevenues.isEmpty()) return BigDecimal.ZERO;
        
        return groupRevenues.stream()
                .reduce(BigDecimal.ZERO, BigDecimal::add)
                .divide(BigDecimal.valueOf(groupRevenues.size()), 4, RoundingMode.HALF_UP);
    }

    private String assignAbcGroup(BigDecimal deviationCoeff) {
        if (deviationCoeff.compareTo(BigDecimal.valueOf(1.5)) > 0) {
            return "A";
        } else if (deviationCoeff.compareTo(BigDecimal.ONE) >= 0) {
            return "B";
        } else {
            return "C";
        }
    }

    private BigDecimal calculateRealGrossProfitFromPromotion(PromotionsTracking promo, JsonNode salesReport) {
        BigDecimal promotionPrice = promo.getPriceForPromotionParticipation() != null ? promo.getPriceForPromotionParticipation() : BigDecimal.ZERO;
        BigDecimal grossProfit = promo.getGrossProfit() != null ? promo.getGrossProfit() : BigDecimal.ZERO;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∞–ª–æ–≤—É—é –ø—Ä–∏–±—ã–ª—å –∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Ñ–æ—Ä–º—É–ª—É
        if (grossProfit.compareTo(BigDecimal.ZERO) > 0) {
            return grossProfit;
        }
        
        // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –ø—Ä–æ–º–æ —Ü–µ–Ω–∞ * –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        return promotionPrice.multiply(BigDecimal.valueOf(0.15));
    }

    private Map<String, Object> calculateRealAdvertisingMetrics(AdvertisingCampaign campaign, JsonNode advertData) {
        Map<String, Object> metrics = new HashMap<>();
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –ø–æ–ª—è –∏–∑ –∫–∞–º–ø–∞–Ω–∏–∏
        BigDecimal calculation = campaign.getCalculation() != null ? campaign.getCalculation() : BigDecimal.ZERO;
        metrics.put("calculation", calculation);
        
        // –ù–µ–¥–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        metrics.put("week1Value", campaign.getWeek1Value() != null ? campaign.getWeek1Value() : BigDecimal.ZERO);
        metrics.put("week2Value", campaign.getWeek2Value() != null ? campaign.getWeek2Value() : BigDecimal.ZERO);
        metrics.put("week3Value", campaign.getWeek3Value() != null ? campaign.getWeek3Value() : BigDecimal.ZERO);
        
        return metrics;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–≤–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü (–ø–æ–∫–∞ –±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
    private Map<String, Object> createRealWeeklyPivotTable(JsonNode financeReport, List<WeeklyFinancialReport> weeklyReports) {
        Map<String, Object> pivotData = new HashMap<>();
        // TODO: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        return pivotData;
    }

    private Map<String, Object> getWeeklyReportSummary(List<WeeklyFinancialReport> reports) {
        Map<String, Object> summary = new HashMap<>();
        summary.put("reportsCount", reports.size());
        return summary;
    }

    private Map<String, Object> createOverallAbcAnalysis(List<Map<String, Object>> abcData) {
        Map<String, Object> overall = new HashMap<>();
        overall.put("totalItems", abcData.size());
        return overall;
    }

    private Map<String, Object> createGroupSummary(List<Map<String, Object>> abcData) {
        Map<String, Object> summary = new HashMap<>();
        summary.put("groupsCount", abcData.stream().map(row -> row.get("clusterGroup")).collect(Collectors.toSet()).size());
        return summary;
    }

    private Map<String, Object> createApiDataSummary(JsonNode financeReport, JsonNode salesReport, JsonNode stocksReport) {
        Map<String, Object> summary = new HashMap<>();
        summary.put("financeRecords", financeReport != null && financeReport.isArray() ? financeReport.size() : 0);
        summary.put("salesRecords", salesReport != null && salesReport.isArray() ? salesReport.size() : 0);
        summary.put("stocksRecords", stocksReport != null && stocksReport.isArray() ? stocksReport.size() : 0);
        return summary;
    }
} 