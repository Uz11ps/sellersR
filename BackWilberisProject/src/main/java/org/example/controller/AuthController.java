package org.example.controller;

import jakarta.validation.Valid;
import org.example.dto.auth.*;
import org.example.entity.User;
import org.example.repository.UserRepository;
import org.example.service.AuthService;
import org.example.service.JwtService;
import org.example.service.SubscriptionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
@RequestMapping("/api/auth")
public class AuthController {
    
    private final AuthService authService;
    
    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private SubscriptionService subscriptionService;
    
    @Autowired
    private JwtService jwtService;
    
    public AuthController(AuthService authService, JwtService jwtService) {
        this.authService = authService;
        this.jwtService = jwtService;
    }
    
    @PostMapping("/register")
    public ResponseEntity<?> register(@RequestBody RegisterRequest request) {
        try {
            System.out.println("üìù –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: " + request.getEmail());
            AuthResponse response = authService.register(request);
            String verificationCode = authService.getVerificationCode(request.getEmail());
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
                "token", response.getToken(),
                "user", response,
                "verificationCode", verificationCode,
                "telegramBot", "@SellersWilberis_bot"
            ));
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + e.getMessage());
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", e.getMessage()
            ));
        }
    }
    
    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody LoginRequest request) {
        try {
            System.out.println("üîë –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: " + request.getEmail());
            AuthResponse response = authService.authenticate(request);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
                "token", response.getToken(),
                "user", response
            ));
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " + e.getMessage());
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", e.getMessage()
            ));
        }
    }
    
    @PostMapping("/verify")
    public ResponseEntity<?> verify(@RequestBody Map<String, String> request) {
        try {
            String verificationCode = request.get("verificationCode");
            
            System.out.println("üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –∫–æ–¥–æ–º: " + verificationCode);
            
            if (verificationCode == null || verificationCode.trim().isEmpty()) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
                ));
            }
            
            boolean verified = authService.verifyUser(verificationCode);
            
            if (verified) {
                System.out.println("‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");
                return ResponseEntity.ok(Map.of(
                    "success", true,
                    "message", "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"
                ));
            } else {
                System.out.println("‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–æ–¥");
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                ));
            }
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: " + e.getMessage());
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", e.getMessage()
            ));
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     */
    @GetMapping("/user-info")
    public ResponseEntity<?> getUserInfo(@RequestHeader(value = "Authorization", required = false) String authHeader) {
        try {
            System.out.println("üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ");
            
            if (authHeader == null || !authHeader.startsWith("Bearer ")) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
                ));
            }
            
            String token = authHeader.substring(7);
            String userEmail = authService.extractEmailFromToken(token);
            
            if (userEmail == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω"
                ));
            }
            
            User user = userRepository.findByEmail(userEmail)
                    .orElse(null);
            
            if (user == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                ));
            }
            
            boolean hasSubscription = subscriptionService.hasActiveSubscription(user);
            boolean hasApiKey = user.getWildberriesApiKey() != null && !user.getWildberriesApiKey().trim().isEmpty();
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "user", Map.of(
                    "id", user.getId(),
                    "email", user.getEmail(),
                    "firstName", user.getFirstName() != null ? user.getFirstName() : "",
                    "lastName", user.getLastName() != null ? user.getLastName() : "",
                    "phoneNumber", user.getPhoneNumber() != null ? user.getPhoneNumber() : "",
                    "isVerified", user.getIsVerified(),
                    "hasApiKey", hasApiKey,
                    "hasSubscription", hasSubscription
                )
            ));
            
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: " + e.getMessage());
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: " + e.getMessage()
            ));
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @PostMapping("/update-profile")
    public ResponseEntity<?> updateProfile(
            @RequestHeader(value = "Authorization", required = false) String authHeader,
            @RequestBody Map<String, String> request) {
        try {
            System.out.println("‚úèÔ∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è");
            
            if (authHeader == null || !authHeader.startsWith("Bearer ")) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
                ));
            }
            
            String token = authHeader.substring(7);
            String userEmail = authService.extractEmailFromToken(token);
            
            if (userEmail == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω"
                ));
            }
            
            User user = userRepository.findByEmail(userEmail)
                    .orElse(null);
            
            if (user == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                ));
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (request.containsKey("firstName")) {
                user.setFirstName(request.get("firstName"));
            }
            
            if (request.containsKey("lastName")) {
                user.setLastName(request.get("lastName"));
            }
            
            if (request.containsKey("phoneNumber")) {
                user.setPhoneNumber(request.get("phoneNumber"));
            }
            
            userRepository.save(user);
            
            System.out.println("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ: " + userEmail);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
            ));
            
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: " + e.getMessage());
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: " + e.getMessage()
            ));
        }
    }
    
    /**
     * –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @PostMapping("/change-password")
    public ResponseEntity<?> changePassword(
            @RequestHeader(value = "Authorization", required = false) String authHeader,
            @RequestBody Map<String, String> request) {
        try {
            System.out.println("üîê –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è");
            
            if (authHeader == null || !authHeader.startsWith("Bearer ")) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
                ));
            }
            
            String token = authHeader.substring(7);
            String userEmail = authService.extractEmailFromToken(token);
            
            if (userEmail == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω"
                ));
            }
            
            String currentPassword = request.get("currentPassword");
            String newPassword = request.get("newPassword");
            
            if (currentPassword == null || newPassword == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                ));
            }
            
            boolean changed = authService.changePassword(userEmail, currentPassword, newPassword);
            
            if (changed) {
                System.out.println("‚úÖ –ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: " + userEmail);
                return ResponseEntity.ok(Map.of(
                    "success", true,
                    "message", "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω"
                ));
            } else {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å"
                ));
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: " + e.getMessage());
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: " + e.getMessage()
            ));
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º API –∫–ª—é—á–µ
     */
    @GetMapping("/api-key")
    public ResponseEntity<?> getApiKey(@RequestParam(required = false) String email, 
                                     @RequestHeader(value = "Authorization", required = false) String authHeader) {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ —Ç–æ–∫–µ–Ω–∞
            String userEmail = email;
            
            // –ï—Å–ª–∏ email –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ —Ç–æ–∫–µ–Ω–∞
            if (userEmail == null && authHeader != null && authHeader.startsWith("Bearer ")) {
                String token = authHeader.substring(7);
                userEmail = authService.extractEmailFromToken(token);
            }
            
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            if (userEmail == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å email –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
                ));
            }
            
            System.out.println("üîç Getting API key for user: " + userEmail);
            
            User user = userRepository.findByEmail(userEmail)
                    .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            boolean hasSubscription = subscriptionService.hasActiveSubscription(user);
            if (!hasSubscription) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API –∫–ª—é—á—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
                    "requiresSubscription", true
                ));
            }
            
            boolean hasApiKey = user.getWildberriesApiKey() != null && !user.getWildberriesApiKey().trim().isEmpty();
            String apiKey = hasApiKey ? user.getWildberriesApiKey() : "";
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "hasApiKey", hasApiKey,
                "apiKey", apiKey
            ));
            
        } catch (Exception e) {
            System.err.println("‚ùå Error getting API key: " + e.getMessage());
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞: " + e.getMessage()
            ));
        }
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API –∫–ª—é—á–∞ Wildberries
     */
    @PostMapping("/set-api-key")
    public ResponseEntity<?> setApiKey(@RequestParam(required = false) String email, 
                                     @RequestHeader(value = "Authorization", required = false) String authHeader,
                                     @RequestBody Map<String, String> request) {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ —Ç–æ–∫–µ–Ω–∞
            String userEmail = email;
            
            // –ï—Å–ª–∏ email –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ —Ç–æ–∫–µ–Ω–∞
            if (userEmail == null && authHeader != null && authHeader.startsWith("Bearer ")) {
                String token = authHeader.substring(7);
                userEmail = authService.extractEmailFromToken(token);
            }
            
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            if (userEmail == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å email –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
                ));
            }
            
            System.out.println("üîç Setting API key for user: " + userEmail);
            
            User user = userRepository.findByEmail(userEmail)
                    .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            boolean hasSubscription = subscriptionService.hasActiveSubscription(user);
            if (!hasSubscription) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ API –∫–ª—é—á–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
                    "requiresSubscription", true
                ));
            }
            
            String apiKey = request.get("apiKey");
            if (apiKey == null || apiKey.trim().isEmpty()) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
                ));
            }
            
            user.setWildberriesApiKey(apiKey.trim());
            userRepository.save(user);
            
            System.out.println("‚úÖ API key set successfully for user: " + userEmail);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "API –∫–ª—é—á Wildberries —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            ));
            
        } catch (Exception e) {
            System.err.println("‚ùå Error setting API key: " + e.getMessage());
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ API –∫–ª—é—á–∞: " + e.getMessage()
            ));
        }
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞
     */
    @DeleteMapping("/api-key")
    public ResponseEntity<?> deleteApiKey(@RequestParam(required = false) String email,
                                        @RequestHeader(value = "Authorization", required = false) String authHeader) {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ —Ç–æ–∫–µ–Ω–∞
            String userEmail = email;
            
            // –ï—Å–ª–∏ email –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ —Ç–æ–∫–µ–Ω–∞
            if (userEmail == null && authHeader != null && authHeader.startsWith("Bearer ")) {
                String token = authHeader.substring(7);
                userEmail = authService.extractEmailFromToken(token);
            }
            
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            if (userEmail == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å email –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
                ));
            }
            
            System.out.println("üîç Removing API key for user: " + userEmail);
            
            User user = userRepository.findByEmail(userEmail)
                    .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
            
            user.setWildberriesApiKey(null);
            userRepository.save(user);
            
            System.out.println("‚úÖ API key removed successfully for user: " + userEmail);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "API –∫–ª—é—á —É–¥–∞–ª–µ–Ω"
            ));
            
        } catch (Exception e) {
            System.err.println("‚ùå Error removing API key: " + e.getMessage());
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è API –∫–ª—é—á–∞: " + e.getMessage()
            ));
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ - –ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ JWT —Ç–æ–∫–µ–Ω–∞
     */
    @GetMapping("/check-token")
    public ResponseEntity<?> checkToken(@RequestHeader(value = "Authorization", required = false) String authHeader) {
        try {
            System.out.println("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞");
            
            if (authHeader == null || !authHeader.startsWith("Bearer ")) {
                return ResponseEntity.ok(Map.of(
                    "success", true,
                    "hasValidToken", false,
                    "tokenExpired", false,
                    "message", "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                ));
            }
            
            String token = authHeader.substring(7);
            boolean isValid = jwtService.validateTokenSafely(token);
            
            if (isValid) {
                String userEmail = jwtService.extractUsername(token);
                return ResponseEntity.ok(Map.of(
                    "success", true,
                    "hasValidToken", true,
                    "tokenExpired", false,
                    "userEmail", userEmail,
                    "message", "–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"
                ));
            } else {
                // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å email –∏–∑ –∏—Å—Ç–µ–∫—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
                String userEmail = jwtService.extractEmailFromExpiredToken(token);
                return ResponseEntity.ok(Map.of(
                    "success", true,
                    "hasValidToken", false,
                    "tokenExpired", true,
                    "userEmail", userEmail != null ? userEmail : "",
                    "message", "–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫"
                ));
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: " + e.getMessage());
            return ResponseEntity.ok(Map.of(
                "success", true,
                "hasValidToken", false,
                "tokenExpired", false,
                "message", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞"
            ));
        }
    }
} 