package org.example.service;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.lang.NonNull;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.List;

@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {
    
    private static final Logger logger = LoggerFactory.getLogger(JwtAuthenticationFilter.class);
    
    private final JwtService jwtService;
    private final UserDetailsServiceImpl userDetailsService;
    
    // –°–ø–∏—Å–æ–∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å SecurityConfig)
    private static final List<String> PUBLIC_ENDPOINTS = Arrays.asList(
        "/api/auth/login",
        "/api/auth/register", 
        "/api/auth/verify",
        "/api/auth/check-token",
        "/api/public/",
        "/api/public/subscription/free",
        "/api/public/subscription/debug",
        "/api/subscription/plans",
        "/api/subscription/create-trial",
        "/api/subscription/debug/",
        "/api/test/",
        "/api/debug/"
    );
    
    // –°–ø–∏—Å–æ–∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è  
    private static final List<String> CRITICAL_ENDPOINTS = Arrays.asList(
        "/api/subscription/create-trial",
        "/api/subscription/create",
        "/api/subscription/cancel",
        "/api/subscription/info",
        "/api/auth/user-info",
        "/api/auth/api-key",
        "/api/analytics/financial"
    );
    
    public JwtAuthenticationFilter(JwtService jwtService, UserDetailsServiceImpl userDetailsService) {
        this.jwtService = jwtService;
        this.userDetailsService = userDetailsService;
        logger.info("üîí JwtAuthenticationFilter initialized with PUBLIC_ENDPOINTS: {}", PUBLIC_ENDPOINTS);
        logger.info("üîç JwtAuthenticationFilter initialized with CRITICAL_ENDPOINTS: {}", CRITICAL_ENDPOINTS);
    }
    
    @Override
    protected void doFilterInternal(
            @NonNull HttpServletRequest request,
            @NonNull HttpServletResponse response,
            @NonNull FilterChain filterChain
    ) throws ServletException, IOException {
        
        final String requestURI = request.getRequestURI();
        final String method = request.getMethod();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        response.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
        response.setHeader("Pragma", "no-cache");
        response.setHeader("Expires", "0");
        
        // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ —É–±–∏—Ä–∞–µ–º - –æ–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ SecurityConfig –≥–ª–æ–±–∞–ª—å–Ω–æ
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤
        if (method.equals("OPTIONS")) {
            logger.info("üîç Preflight OPTIONS request for: {}", requestURI);
            // –î–ª—è OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
            filterChain.doFilter(request, response);
            return;
        }
        
        // –û—á–∏—â–∞–µ–º URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        String cleanUri = requestURI;
        if (cleanUri.contains("?")) {
            cleanUri = cleanUri.substring(0, cleanUri.indexOf("?"));
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ URL –ø–∞—Ä–∞–º–µ—Ç—Ä _t
        String queryString = request.getQueryString();
        if (queryString != null && queryString.contains("_t=")) {
            logger.warn("‚ö†Ô∏è URL —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä _t: {}", queryString);
            
            // –ï—Å–ª–∏ —ç—Ç–æ create-trial, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
            if (cleanUri.endsWith("/api/subscription/create-trial")) {
                logger.info("üîì –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ create-trial —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º _t –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞");
                filterChain.doFilter(request, response);
                return;
            }
        }
        
        // –ü–ï–†–í–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ - –±–µ–∑—É—Å–ª–æ–≤–Ω—ã–π bypass –¥–ª—è –í–°–ï–• –ø—É–±–ª–∏—á–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        if (cleanUri.startsWith("/api/public/")) {
            logger.info("üåç BYPASS JWT for PUBLIC endpoint: {}", cleanUri);
            filterChain.doFilter(request, response);
            return;
        }
        
        // –í–¢–û–†–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ - –±–µ–∑—É—Å–ª–æ–≤–Ω—ã–π bypass –¥–ª—è create-trial
        if (cleanUri.endsWith("/api/subscription/create-trial")) {
            logger.info("üéÅ BYPASS JWT for create-trial endpoint (FIRST CHECK)");
            filterChain.doFilter(request, response);
            return;
        }
        
        // –¢–†–ï–¢–¨–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ - –±–µ–∑—É—Å–ª–æ–≤–Ω—ã–π bypass –¥–ª—è debug —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        if (cleanUri.startsWith("/api/subscription/debug/")) {
            logger.info("üîç BYPASS JWT for debug endpoint: {}", cleanUri);
            filterChain.doFilter(request, response);
            return;
        }
        
        // –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        boolean isCriticalEndpoint = CRITICAL_ENDPOINTS.stream()
            .anyMatch(cleanUri::endsWith);
            
        if (isCriticalEndpoint) {
            logger.info("‚ö†Ô∏è CRITICAL ENDPOINT: {} {}", method, cleanUri);
        } else {
            logger.info("üîç JWT Filter: {} {}", method, cleanUri);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø—É–±–ª–∏—á–Ω—ã–º
        boolean isPublicEndpoint = false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if (PUBLIC_ENDPOINTS.contains(cleanUri)) {
            isPublicEndpoint = true;
            logger.info("üîì Exact match for public endpoint: {}", cleanUri);
        } 
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã
        else {
            for (String prefix : PUBLIC_ENDPOINTS) {
                if (prefix.endsWith("/") && cleanUri.startsWith(prefix)) {
                    isPublicEndpoint = true;
                    logger.info("üîì Prefix match for public endpoint: {} with prefix {}", cleanUri, prefix);
                    break;
                }
            }
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å SecurityConfig)
        if (cleanUri.equals("/api/auth/login") ||
            cleanUri.equals("/api/auth/register") ||
            cleanUri.equals("/api/auth/verify") ||
            cleanUri.equals("/api/auth/check-token") ||
            cleanUri.startsWith("/api/public/") || 
            cleanUri.equals("/api/subscription/plans") ||
            cleanUri.equals("/api/subscription/create-trial") ||
            cleanUri.startsWith("/api/subscription/debug/")) {
            isPublicEndpoint = true;
            logger.info("üîì Special case: public endpoint: {}", cleanUri);
        }
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        if (isPublicEndpoint) {
            logger.info("üîì BYPASSING JWT for: {}", cleanUri);
            filterChain.doFilter(request, response);
            return;
        }
        
        final String authHeader = request.getHeader("Authorization");
        logger.info("üîë Authorization header: {}", authHeader != null ? "PRESENT" : "MISSING");
        
        // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–õ–ê–î–ö–ê - –∏—â–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ—Ç frontend
        String frontendRequestId = request.getHeader("X-Frontend-Request-ID");
        String debugSource = request.getHeader("X-Debug-Source");
        
        if (frontendRequestId != null) {
            logger.info("üö®üö®üö® FRONTEND REQUEST DETECTED!!!");
            logger.info("üö® Request ID: {}", frontendRequestId);
            logger.info("üö® Debug Source: {}", debugSource);
            logger.info("üö® This is AXIOS request to: {}", request.getRequestURI());
        } else {
            logger.info("üîç NO FRONTEND HEADERS - likely CORS blocking custom headers");
        }
        
        // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info("üîç All request headers:");
        java.util.Enumeration<String> headerNames = request.getHeaderNames();
        while (headerNames.hasMoreElements()) {
            String headerName = headerNames.nextElement();
            String headerValue = request.getHeader(headerName);
            if ("authorization".equalsIgnoreCase(headerName)) {
                logger.info("  üîë {}: {}", headerName, headerValue != null ? headerValue.substring(0, Math.min(headerValue.length(), 50)) + "..." : "null");
            } else if ("x-frontend-request-id".equalsIgnoreCase(headerName) || "x-debug-source".equalsIgnoreCase(headerName)) {
                logger.info("  üö® {}: {}", headerName, headerValue);
            } else {
                logger.info("  üìã {}: {}", headerName, headerValue);
            }
        }
        
        final String jwt;
        
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            logger.warn("‚ùå NO VALID BEARER TOKEN for: {} {}", method, cleanUri);
            filterChain.doFilter(request, response);
            return;
        }
        
        try {
            jwt = authHeader.substring(7);
            logger.info("üîë Extracted JWT token: {}...", jwt.substring(0, Math.min(jwt.length(), 30)));
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∞–ª–∏–¥–µ–Ω –ª–∏ —Ç–æ–∫–µ–Ω, –±–µ–∑ –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            if (jwtService.validateTokenSafely(jwt)) {
                // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                String userEmail = jwtService.extractUsername(jwt);
                logger.info("üìß Extracted email from token: {}", userEmail);
                
                if (userEmail != null && SecurityContextHolder.getContext().getAuthentication() == null) {
                    logger.info("üë§ Loading user details for: {}", userEmail);
                    
                    UserDetails userDetails = this.userDetailsService.loadUserByUsername(userEmail);
                    logger.info("‚úÖ User details loaded successfully");
                    
                    if (jwtService.isTokenValid(jwt, userDetails)) {
                        logger.info("üéØ TOKEN IS VALID - Setting authentication");
                        
                        UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(
                                userDetails,
                                null,
                                userDetails.getAuthorities()
                        );
                        authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                        SecurityContextHolder.getContext().setAuthentication(authToken);
                        
                        logger.info("‚úÖ AUTHENTICATION SET SUCCESSFULLY for: {}", userEmail);
                    } else {
                        logger.error("‚ùå TOKEN IS INVALID for user: {}", userEmail);
                    }
                }
            } else {
                // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å email –∏–∑ –∏—Å—Ç–µ–∫—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
                String userEmail = jwtService.extractEmailFromExpiredToken(jwt);
                
                if (userEmail != null) {
                    logger.info("‚è∞ Token expired for user: {}", userEmail);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Å—Ç–µ–∫—à–µ–º —Ç–æ–∫–µ–Ω–µ –≤ –∞—Ç—Ä–∏–±—É—Ç—ã –∑–∞–ø—Ä–æ—Å–∞
                    // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
                    request.setAttribute("expiredToken", true);
                    request.setAttribute("expiredTokenEmail", userEmail);
                } else {
                    logger.error("‚ùå Could not extract email from expired token");
                }
            }
        } catch (Exception e) {
            logger.error("‚ùå CRITICAL ERROR processing JWT token: {}", e.getMessage(), e);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        boolean isAuthenticated = SecurityContextHolder.getContext().getAuthentication() != null;
        logger.info("üèÅ Final authentication status for {}: {}", cleanUri, isAuthenticated ? "AUTHENTICATED" : "NOT AUTHENTICATED");
        
        filterChain.doFilter(request, response);
    }
} 
 
 