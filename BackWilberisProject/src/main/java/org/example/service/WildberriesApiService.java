package org.example.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.entity.AnalyticsData;
import org.example.entity.Product;
import org.example.entity.User;
import org.example.repository.AnalyticsDataRepository;
import org.example.repository.ProductRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.locks.ReentrantLock;

@Service
public class WildberriesApiService {

    @Autowired
    private AnalyticsDataRepository analyticsDataRepository;

    @Autowired
    private ProductRepository productRepository;

    private final RestTemplate restTemplate = new RestTemplate();
    private final ObjectMapper objectMapper = new ObjectMapper();

    // –ë–∞–∑–æ–≤—ã–µ URL –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ (—Ä–µ–∞–ª—å–Ω—ã–µ API Wildberries)
    private static final String STATISTICS_API = "https://statistics-api.wildberries.ru";
    private static final String ANALYTICS_API = "https://seller-analytics-api.wildberries.ru";
    private static final String ADVERT_API = "https://advert-api.wildberries.ru";
    private static final String FEEDBACKS_API = "https://feedbacks-api.wildberries.ru";
    private static final String COMMON_API = "https://common-api.wildberries.ru";
    private static final String CONTENT_API = "https://content-api.wildberries.ru";
    private static final String MARKETPLACE_API = "https://marketplace-api.wildberries.ru";
    private static final String SUPPLIES_API = "https://supplies-api.wildberries.ru";
    private static final String DOCUMENTS_API = "https://documents-api.wildberries.ru";
    private static final String FINANCE_API = "https://finance-api.wildberries.ru";
    
    // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ª–∏–º–∏—Ç–æ–≤
    private static long lastRequestTime = 0;
    private static final long MIN_REQUEST_INTERVAL = 2000; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 2 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    // –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
    private static final int MAX_RETRY_ATTEMPTS = 3;
    
    // –§–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
    private static volatile boolean isWaitingForRateLimit = false;
    private static volatile long rateLimitResetTime = 0;
    
    // –ö–µ—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    private static final Map<String, CachedResponse> responseCache = new ConcurrentHashMap<>();
    private static final long CACHE_DURATION = 60000; // 1 –º–∏–Ω—É—Ç–∞
    
    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –æ–¥–Ω–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
    private static final ReentrantLock apiLock = new ReentrantLock();
    
    // –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    private static class CachedResponse {
        final JsonNode data;
        final long timestamp;
        
        CachedResponse(JsonNode data) {
            this.data = data;
            this.timestamp = System.currentTimeMillis();
        }
        
        boolean isExpired() {
            return System.currentTimeMillis() - timestamp > CACHE_DURATION;
        }
    }
    
    // Backup sandbox URLs –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    private static final String STATISTICS_API_SANDBOX = "https://statistics-api-sandbox.wildberries.ru";
    private static final String ADVERT_API_SANDBOX = "https://advert-api-sandbox.wildberries.ru";
    private static final String FEEDBACKS_API_SANDBOX = "https://feedbacks-api-sandbox.wildberries.ru";

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    private synchronized void rateLimitControl() {
        long currentTime = System.currentTimeMillis();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∂–¥–µ–º –ª–∏ –º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
        if (isWaitingForRateLimit && currentTime < rateLimitResetTime) {
            long waitTime = rateLimitResetTime - currentTime;
            System.out.println("‚è∏Ô∏è –û–∂–∏–¥–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –µ—â–µ " + (waitTime / 1000) + " —Å–µ–∫—É–Ω–¥...");
            try {
                Thread.sleep(waitTime);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                return;
            }
            isWaitingForRateLimit = false;
        }
        
        // –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        long timeSinceLastRequest = currentTime - lastRequestTime;
        if (timeSinceLastRequest < MIN_REQUEST_INTERVAL) {
            try {
                long sleepTime = MIN_REQUEST_INTERVAL - timeSinceLastRequest;
                System.out.println("‚è≥ –ñ–¥–µ–º " + sleepTime + " –º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º...");
                Thread.sleep(sleepTime);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
        
        lastRequestTime = System.currentTimeMillis();
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ (–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
     */
    public void clearCache() {
        responseCache.clear();
        System.out.println("üßπ –ö–µ—à –æ—á–∏—â–µ–Ω");
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ ping endpoints
     */
    public boolean validateApiKey(String apiKey) {
        try {
            System.out.println("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞: " + apiKey.substring(0, Math.min(20, apiKey.length())) + "...");
            
            HttpHeaders headers = createHeaders(apiKey);
            HttpEntity<String> entity = new HttpEntity<>(headers);
            
            // –°–ø–∏—Å–æ–∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
            String[] pingEndpoints = {
                COMMON_API + "/ping",
                STATISTICS_API + "/ping"
            };
            
            for (String endpoint : pingEndpoints) {
                try {
                    System.out.println("üìû –ó–∞–ø—Ä–æ—Å –∫: " + endpoint);
                    ResponseEntity<String> response = restTemplate.exchange(
                        endpoint,
                        HttpMethod.GET,
                        entity,
                        String.class
                    );
                    
                    if (response.getStatusCode() == HttpStatus.OK) {
                        System.out.println("‚úÖ API –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω! –≠–Ω–¥–ø–æ–∏–Ω—Ç: " + endpoint);
                        return true;
                    }
                } catch (HttpClientErrorException e) {
                    System.out.println("‚ö†Ô∏è " + endpoint + " - HTTP " + e.getStatusCode() + ": " + e.getResponseBodyAsString());
                } catch (Exception e) {
                    System.out.println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ " + endpoint + ": " + e.getMessage());
                }
            }
            
            System.err.println("‚ùå API –∫–ª—é—á –Ω–µ –≤–∞–ª–∏–¥–µ–Ω –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞");
            return false;
            
        } catch (Exception e) {
            System.err.println("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ API –∫–ª—é—á–∞: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Statistics API –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
     * –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WB
     */
    public boolean testStatisticsAccess(String apiKey) {
        try {
            HttpHeaders headers = createHeaders(apiKey);
            HttpEntity<String> entity = new HttpEntity<>(headers);
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ Statistics API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            String[] testEndpoints = {
                STATISTICS_API + "/ping", // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                STATISTICS_API + "/api/v1/supplier/incomes", // –ü–æ—Å—Ç–∞–≤–∫–∏
                STATISTICS_API + "/api/v1/supplier/stocks" // –û—Å—Ç–∞—Ç–∫–∏
            };
            
            boolean hasAccess = false;
            for (String endpoint : testEndpoints) {
                try {
                    if (endpoint.contains("/ping")) {
                        // Ping —ç–Ω–¥–ø–æ–∏–Ω—Ç –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                        ResponseEntity<String> response = restTemplate.exchange(endpoint, HttpMethod.GET, entity, String.class);
                        if (response.getStatusCode().is2xxSuccessful()) {
                            System.out.println("‚úÖ Statistics API ping —É—Å–ø–µ—à–µ–Ω");
                            hasAccess = true;
                        }
                    } else {
                        // –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                        LocalDate yesterday = LocalDate.now().minusDays(1);
                        String dateFrom = yesterday.format(DateTimeFormatter.ISO_LOCAL_DATE);
                        String urlWithParams = endpoint + "?dateFrom=" + dateFrom;
                        
                        ResponseEntity<String> response = restTemplate.exchange(urlWithParams, HttpMethod.GET, entity, String.class);
                        if (response.getStatusCode().is2xxSuccessful()) {
                            System.out.println("‚úÖ Statistics API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: " + endpoint);
                            hasAccess = true;
                        }
                    }
                } catch (HttpClientErrorException e) {
                    if (e.getStatusCode() == HttpStatus.UNAUTHORIZED) {
                        System.err.println("‚ùå Statistics API: –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è " + endpoint);
                        return false; // –ï—Å–ª–∏ 401 - —Ç–æ–∫–µ–Ω —Ç–æ—á–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                    } else if (e.getStatusCode().value() == 422 || e.getStatusCode() == HttpStatus.BAD_REQUEST) {
                        System.out.println("‚ö†Ô∏è Statistics API: " + endpoint + " —Ç—Ä–µ–±—É–µ—Ç –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –Ω–æ —Ç–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç");
                        hasAccess = true; // 422/400 –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —Ç–æ–∫–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ
                    } else {
                        System.out.println("‚ö†Ô∏è Statistics API: " + endpoint + " - " + e.getStatusCode());
                    }
                }
            }
            
            if (hasAccess) {
                System.out.println("‚úÖ Statistics API –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞");
            } else {
                System.err.println("‚ùå Statistics API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞");
            }
            
            return hasAccess;
            
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Statistics API: " + e.getMessage());
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —á–µ—Ä–µ–∑ Statistics API
     * –ò—Å–ø–æ–ª—å–∑—É–µ–º getSalesReport –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    public JsonNode getFinanceReport(String apiKey, LocalDate startDate, LocalDate endDate) {
        // Finance API –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Statistics API
        return getSalesReport(apiKey, startDate, endDate);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ —á–µ—Ä–µ–∑ Finance API
     * –≠–Ω–¥–ø–æ–∏–Ω—Ç /api/v5/supplier/balance –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
     */
    public JsonNode getSellerBalance(String apiKey) {
        try {
            String url = FINANCE_API + "/api/v5/supplier/balance";
            System.out.println("üîç –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞: " + url);

            HttpHeaders headers = createHeaders(apiKey);
            HttpEntity<String> entity = new HttpEntity<>(headers);

            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
            
            if (response.getStatusCode().is2xxSuccessful()) {
                System.out.println("‚úÖ –ë–∞–ª–∞–Ω—Å –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ");
                return objectMapper.readTree(response.getBody());
            } else {
                System.err.println("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: " + response.getStatusCode());
                return null;
            }
            
        } catch (HttpClientErrorException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: HTTP " + e.getStatusCode());
            System.err.println("–û—Ç–≤–µ—Ç: " + e.getResponseBodyAsString());
            return null;
            
        } catch (Exception e) {
            System.err.println("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: " + e.getMessage());
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞–º —á–µ—Ä–µ–∑ Statistics API
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —ç–Ω–¥–ø–æ–∏–Ω—Ç /api/v1/supplier/sales —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ WB
     */
    public JsonNode getSalesReport(String apiKey, LocalDate startDate, LocalDate endDate) {
        String cacheKey = "sales_" + apiKey.substring(0, 10) + "_" + startDate + "_" + endDate;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        CachedResponse cached = responseCache.get(cacheKey);
        if (cached != null && !cached.isExpired()) {
            System.out.println("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è sales report");
            return cached.data;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        apiLock.lock();
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            cached = responseCache.get(cacheKey);
            if (cached != null && !cached.isExpired()) {
                System.out.println("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è sales report (–ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)");
                return cached.data;
            }
            
            // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
            JsonNode result = getSalesReportWithRetry(apiKey, startDate, endDate, 0);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            if (result != null) {
                responseCache.put(cacheKey, new CachedResponse(result));
            }
            
            return result;
        } finally {
            apiLock.unlock();
        }
    }
    
    private JsonNode getSalesReportWithRetry(String apiKey, LocalDate startDate, LocalDate endDate, int attemptNumber) {
        try {
            // –ö–æ–Ω—Ç—Ä–æ–ª—å –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
            rateLimitControl();
            
            // –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è WB API: YYYY-MM-DD
            String dateFrom = startDate.format(DateTimeFormatter.ISO_LOCAL_DATE);
            
            // –°—Ç—Ä–æ–∏–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            UriComponentsBuilder builder = UriComponentsBuilder
                .fromHttpUrl(STATISTICS_API + "/api/v1/supplier/sales")
                .queryParam("dateFrom", dateFrom);
            
            // –î–æ–±–∞–≤–ª—è–µ–º dateTo –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if (endDate != null && !endDate.equals(startDate)) {
                String dateTo = endDate.format(DateTimeFormatter.ISO_LOCAL_DATE);
                builder.queryParam("dateTo", dateTo);
            }
            
            String url = builder.toUriString();
            System.out.println("üîç –ó–∞–ø—Ä–æ—Å –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–¥–∞–∂: " + url);

            HttpHeaders headers = createHeaders(apiKey);
            HttpEntity<String> entity = new HttpEntity<>(headers);

            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
            
            if (response.getStatusCode().is2xxSuccessful()) {
                System.out.println("‚úÖ –û—Ç—á–µ—Ç –ø—Ä–æ–¥–∞–∂ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ");
                return objectMapper.readTree(response.getBody());
            } else {
                System.err.println("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: " + response.getStatusCode());
                return null;
            }
            
        } catch (HttpClientErrorException e) {
            System.err.println("‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–¥–∞–∂: " + e.getStatusCode());
            System.err.println("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: " + e.getResponseBodyAsString());
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ 429 Too Many Requests
            if (e.getStatusCode() == HttpStatus.TOO_MANY_REQUESTS) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                if (attemptNumber >= MAX_RETRY_ATTEMPTS - 1) {
                    System.err.println("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (" + MAX_RETRY_ATTEMPTS + ")");
                    return null;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                HttpHeaders headers = e.getResponseHeaders();
                String retryAfter = headers != null ? headers.getFirst("X-Ratelimit-Retry") : null;
                String resetTime = headers != null ? headers.getFirst("X-Ratelimit-Reset") : null;
                
                int waitSeconds = 5; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Å–µ–∫—É–Ω–¥
                
                if (retryAfter != null) {
                    try {
                        waitSeconds = Integer.parseInt(retryAfter);
                    } catch (NumberFormatException nfe) {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    }
                }
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                isWaitingForRateLimit = true;
                rateLimitResetTime = System.currentTimeMillis() + (waitSeconds * 1000L);
                
                System.out.println("‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ " + (attemptNumber + 1) + "/" + MAX_RETRY_ATTEMPTS + 
                                 "). –ñ–¥–µ–º " + waitSeconds + " —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...");
                if (resetTime != null) {
                    System.out.println("   –õ–∏–º–∏—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ " + resetTime + " —Å–µ–∫—É–Ω–¥");
                }
                
                try {
                    Thread.sleep(waitSeconds * 1000L); // –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
                    isWaitingForRateLimit = false; // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                    // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
                    return getSalesReportWithRetry(apiKey, startDate, endDate, attemptNumber + 1);
                } catch (InterruptedException ie) {
                    Thread.currentThread().interrupt();
                    isWaitingForRateLimit = false; // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏
                    return null;
                }
            }
            
            // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –∏–ª–∏ sandbox
            if (e.getStatusCode() == HttpStatus.NOT_FOUND || e.getStatusCode() == HttpStatus.FORBIDDEN) {
                System.out.println("üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç...");
                return getSalesReportFallback(apiKey, startDate, endDate);
            }
            
            return null;
        } catch (Exception e) {
            System.err.println("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–¥–∞–∂: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }
    
    /**
     * Fallback –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–¥–∞–∂ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
     */
    private JsonNode getSalesReportFallback(String apiKey, LocalDate startDate, LocalDate endDate) {
        try {
            // –ü—Ä–æ–±—É–µ–º orders —ç–Ω–¥–ø–æ–∏–Ω—Ç –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
            String dateFrom = startDate.format(DateTimeFormatter.ISO_LOCAL_DATE);
            String url = STATISTICS_API + "/api/v1/supplier/orders?dateFrom=" + dateFrom + "&flag=0";
            
            HttpHeaders headers = createHeaders(apiKey);
            HttpEntity<String> entity = new HttpEntity<>(headers);
            
            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
            
            if (response.getStatusCode().is2xxSuccessful()) {
                System.out.println("‚úÖ Fallback –æ—Ç—á–µ—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ orders API");
                return objectMapper.readTree(response.getBody());
            }
            
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è Fallback –º–µ—Ç–æ–¥ —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: " + e.getMessage());
        }
        
        return null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ —á–µ—Ä–µ–∑ Common API
     * –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø—Ä–æ–±–ª–µ–º
     */
    public JsonNode getSellerInfo(String apiKey) {
        try {
            String url = COMMON_API + "/api/v1/seller-info";
            System.out.println("üîç –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ: " + url);

            HttpHeaders headers = createHeaders(apiKey);
            HttpEntity<String> entity = new HttpEntity<>(headers);

            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
            
            if (response.getStatusCode().is2xxSuccessful()) {
                System.out.println("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
                return objectMapper.readTree(response.getBody());
            } else {
                System.err.println("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: " + response.getStatusCode());
                return null;
            }
            
        } catch (HttpClientErrorException e) {
            if (e.getStatusCode() == HttpStatus.UNAUTHORIZED) {
                System.err.println("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ");
                System.err.println("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ –∏ –µ–≥–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞");
                return null;
            } else if (e.getStatusCode() == HttpStatus.FORBIDDEN) {
                System.err.println("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ —Ç–æ–∫–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π (—Å –æ–ø—Ü–∏–µ–π '–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç—É—Ä')");
                
                // –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                try {
                    return objectMapper.readTree("{\"name\": \"–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü\", \"sid\": \"test-token\", \"tradeMark\": \"–¢–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω\", \"note\": \"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞\"}");
                } catch (Exception parseE) {
                    return null;
                }
            }
            
            System.err.println("‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ: " + e.getStatusCode());
            System.err.println("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: " + e.getResponseBodyAsString());
            return null;
            
        } catch (Exception e) {
            System.err.println("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ Statistics API
     */
    public JsonNode getStocksReport(String apiKey, LocalDate dateFrom) {
        try {
            String dateFromStr = dateFrom.format(DateTimeFormatter.ISO_LOCAL_DATE);
            String url = STATISTICS_API + "/api/v1/supplier/stocks?dateFrom=" + dateFromStr;
            System.out.println("üîç –ó–∞–ø—Ä–æ—Å –æ—Å—Ç–∞—Ç–∫–æ–≤: " + url);

            HttpHeaders headers = createHeaders(apiKey);
            HttpEntity<String> entity = new HttpEntity<>(headers);

            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
            
            if (response.getStatusCode().is2xxSuccessful()) {
                System.out.println("‚úÖ –û—Ç—á–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ");
                return objectMapper.readTree(response.getBody());
            } else {
                System.err.println("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: " + response.getStatusCode());
                return null;
            }
            
        } catch (HttpClientErrorException e) {
            System.err.println("‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: " + e.getStatusCode());
            System.err.println("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: " + e.getResponseBodyAsString());
            return null;
        } catch (Exception e) {
            System.err.println("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–æ–∫ —á–µ—Ä–µ–∑ Statistics API
     */
    public JsonNode getIncomesReport(String apiKey, LocalDate dateFrom) {
        try {
            String dateFromStr = dateFrom.format(DateTimeFormatter.ISO_LOCAL_DATE);
            String url = STATISTICS_API + "/api/v1/supplier/incomes?dateFrom=" + dateFromStr;
            System.out.println("üîç –ó–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–∞–≤–æ–∫: " + url);

            HttpHeaders headers = createHeaders(apiKey);
            HttpEntity<String> entity = new HttpEntity<>(headers);

            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
            
            if (response.getStatusCode().is2xxSuccessful()) {
                System.out.println("‚úÖ –û—Ç—á–µ—Ç –ø–æ—Å—Ç–∞–≤–æ–∫ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ");
                return objectMapper.readTree(response.getBody());
            } else {
                System.err.println("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: " + response.getStatusCode());
                return null;
            }
            
        } catch (HttpClientErrorException e) {
            System.err.println("‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤–æ–∫: " + e.getStatusCode());
            System.err.println("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: " + e.getResponseBodyAsString());
            return null;
        } catch (Exception e) {
            System.err.println("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤–æ–∫: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ Statistics API
     */
    public JsonNode getOrdersReportNew(String apiKey, LocalDate dateFrom, int flag) {
        try {
            String dateFromStr = dateFrom.format(DateTimeFormatter.ISO_LOCAL_DATE);
            String url = STATISTICS_API + "/api/v1/supplier/orders?dateFrom=" + dateFromStr + "&flag=" + flag;
            System.out.println("üîç –ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤: " + url);

            HttpHeaders headers = createHeaders(apiKey);
            HttpEntity<String> entity = new HttpEntity<>(headers);

            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
            
            if (response.getStatusCode().is2xxSuccessful()) {
                System.out.println("‚úÖ –û—Ç—á–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ");
                return objectMapper.readTree(response.getBody());
            } else {
                System.err.println("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: " + response.getStatusCode());
                return null;
            }
            
        } catch (HttpClientErrorException e) {
            System.err.println("‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: " + e.getStatusCode());
            System.err.println("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: " + e.getResponseBodyAsString());
            return null;
        } catch (Exception e) {
            System.err.println("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ Common API
     */
    public JsonNode getNews(String apiKey, LocalDate fromDate, Integer fromID) {
        try {
            UriComponentsBuilder builder = UriComponentsBuilder
                .fromHttpUrl(COMMON_API + "/api/communications/v2/news");
            
            if (fromDate != null) {
                builder.queryParam("from", fromDate.format(DateTimeFormatter.ISO_LOCAL_DATE));
            }
            
            if (fromID != null) {
                builder.queryParam("fromID", fromID);
            }
            
            String url = builder.toUriString();
            System.out.println("üîç –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ—Å—Ç–µ–π: " + url);

            HttpHeaders headers = createHeaders(apiKey);
            HttpEntity<String> entity = new HttpEntity<>(headers);

            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
            
            if (response.getStatusCode().is2xxSuccessful()) {
                System.out.println("‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
                return objectMapper.readTree(response.getBody());
            } else {
                System.err.println("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: " + response.getStatusCode());
                return null;
            }
            
        } catch (HttpClientErrorException e) {
            System.err.println("‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: " + e.getStatusCode());
            System.err.println("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: " + e.getResponseBodyAsString());
            return null;
        } catch (Exception e) {
            System.err.println("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
     */
    public JsonNode getOrdersReport(String apiKey, LocalDate dateFrom) {
        try {
            String dateFromStr = dateFrom.atStartOfDay().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);
            String url = STATISTICS_API + "/api/v1/supplier/orders?dateFrom=" + dateFromStr;

            HttpHeaders headers = createHeaders(apiKey);
            HttpEntity<String> entity = new HttpEntity<>(headers);

            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
            return objectMapper.readTree(response.getBody());
            
        } catch (HttpClientErrorException e) {
            System.err.println("HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: " + e.getStatusCode() + " - " + e.getResponseBodyAsString());
            return null;
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π (–ø—Ä–æ–¥–∞–∂)
     */
    public JsonNode getSalesData(String apiKey, LocalDate dateFrom) {
        try {
            String dateFromStr = dateFrom.atStartOfDay().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);
            String url = STATISTICS_API + "/api/v1/supplier/sales?dateFrom=" + dateFromStr;

            HttpHeaders headers = createHeaders(apiKey);
            HttpEntity<String> entity = new HttpEntity<>(headers);

            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
            return objectMapper.readTree(response.getBody());
            
        } catch (HttpClientErrorException e) {
            System.err.println("HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂: " + e.getStatusCode() + " - " + e.getResponseBodyAsString());
            return null;
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—É—Ä–∞)
     * –í —Ç–µ—Å—Ç–æ–≤–æ–º –∫–æ–Ω—Ç—É—Ä–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
     */
    public JsonNode getAdvertCampaignsData(String apiKey, LocalDate dateFrom) {
        try {
            // –í —Ç–µ—Å—Ç–æ–≤–æ–º –∫–æ–Ω—Ç—É—Ä–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –†–ö –Ω–µ—Ç
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            return objectMapper.readTree("[]");
            
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π: " + e.getMessage());
            return null;
        }
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
     */
    public void syncAnalyticsData(User user, LocalDate startDate, LocalDate endDate) {
        if (user.getWildberriesApiKey() == null || user.getWildberriesApiKey().trim().isEmpty()) {
            throw new RuntimeException("Wildberries API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }

        try {
            System.out.println("–ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + user.getEmail());
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞
            if (!validateApiKey(user.getWildberriesApiKey())) {
                throw new RuntimeException("–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á Wildberries");
            }

            // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
            JsonNode salesReport = getSalesReport(user.getWildberriesApiKey(), startDate, endDate);
            if (salesReport != null) {
                processSalesReport(user, salesReport, startDate, endDate);
                System.out.println("–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
            }

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
            JsonNode stocksReport = getStocksReport(user.getWildberriesApiKey(), startDate);
            if (stocksReport != null) {
                processStocksReport(user, stocksReport);
                System.out.println("–û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
            }

            // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã
            JsonNode ordersReport = getOrdersReport(user.getWildberriesApiKey(), startDate);
            if (ordersReport != null) {
                processOrdersReport(user, ordersReport, startDate, endDate);
                System.out.println("–û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
            }

            System.out.println("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å API –∫–ª—é—á–æ–º
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Wildberries API
     */
    private HttpHeaders createHeaders(String apiKey) {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.set("Accept", "application/json");
        
        // Wildberries API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization —Å —Ç–æ–∫–µ–Ω–æ–º –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ Bearer)
        headers.set("Authorization", apiKey);
        
        return headers;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
     */
    private void processSalesReport(User user, JsonNode salesReport, LocalDate startDate, LocalDate endDate) {
        try {
            if (salesReport.isArray()) {
                for (JsonNode item : salesReport) {
                    AnalyticsData analyticsData = new AnalyticsData();
                    analyticsData.setUser(user);
                    analyticsData.setPeriodStart(startDate);
                    analyticsData.setPeriodEnd(endDate);
                    analyticsData.setPeriodType("SALES_REPORT");
                    
                    if (item.has("quantity")) {
                        analyticsData.setSoldQuantity(item.get("quantity").asInt());
                    }
                    if (item.has("totalPrice")) {
                        analyticsData.setSalesAmount(BigDecimal.valueOf(item.get("totalPrice").asDouble()));
                    }
                    if (item.has("price")) {
                        analyticsData.setPrice(BigDecimal.valueOf(item.get("price").asDouble()));
                    }

                    analyticsData.setCreatedAt(LocalDateTime.now());
                    analyticsDataRepository.save(analyticsData);
                }
            }
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–¥–∞–∂: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º
     */
    private void processStocksReport(User user, JsonNode stocksReport) {
        try {
            if (stocksReport.isArray()) {
                for (JsonNode item : stocksReport) {
                    Long nmId = item.has("nmId") ? item.get("nmId").asLong() : null;
                    if (nmId == null) continue;

                    Optional<Product> existingProduct = productRepository.findByUserAndNmId(user, nmId);
                    
                    Product product;
                    if (existingProduct.isPresent()) {
                        product = existingProduct.get();
                    } else {
                        product = new Product();
                        product.setUser(user);
                        product.setNmId(nmId);
                    }
                    
                    if (item.has("subject")) {
                        product.setCategory(item.get("subject").asText());
                    }
                    if (item.has("brand")) {
                        product.setBrand(item.get("brand").asText());
                    }
                    if (item.has("vendorCode")) {
                        product.setVendorCode(item.get("vendorCode").asText());
                    }
                    if (item.has("quantity")) {
                        product.setStock(item.get("quantity").asInt());
                    }

                    product.setUpdatedAt(LocalDateTime.now());
                    productRepository.save(product);
                }
            }
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º
     */
    private void processOrdersReport(User user, JsonNode ordersReport, LocalDate startDate, LocalDate endDate) {
        try {
            if (ordersReport.isArray()) {
                int totalOrders = 0;
                BigDecimal totalOrdersAmount = BigDecimal.ZERO;
                
                for (JsonNode item : ordersReport) {
                    totalOrders++;
                    if (item.has("totalPrice")) {
                        totalOrdersAmount = totalOrdersAmount.add(BigDecimal.valueOf(item.get("totalPrice").asDouble()));
                    }
                }

                // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é –∑–∞–ø–∏—Å—å –ø–æ –∑–∞–∫–∞–∑–∞–º
                if (totalOrders > 0) {
                    AnalyticsData analyticsData = new AnalyticsData();
                    analyticsData.setUser(user);
                    analyticsData.setPeriodStart(startDate);
                    analyticsData.setPeriodEnd(endDate);
                    analyticsData.setPeriodType("ORDERS_SUMMARY");
                    analyticsData.setOrdersCount(totalOrders);
                    analyticsData.setSalesAmount(totalOrdersAmount);
                    analyticsData.setCreatedAt(LocalDateTime.now());
                    
                    analyticsDataRepository.save(analyticsData);
                }
            }
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã
    public AnalyticsDataRepository getAnalyticsDataRepository() {
        return analyticsDataRepository;
    }

    public void setAnalyticsDataRepository(AnalyticsDataRepository analyticsDataRepository) {
        this.analyticsDataRepository = analyticsDataRepository;
    }

    public ProductRepository getProductRepository() {
        return productRepository;
    }

    public void setProductRepository(ProductRepository productRepository) {
        this.productRepository = productRepository;
    }
} 
 
 