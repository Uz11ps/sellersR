package org.example.service;

import org.example.dto.admin.*;
import org.example.entity.User;
import org.example.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class AdminService {

    @Autowired
    private UserRepository userRepository;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    public AdminStatsDto getSystemStats() {
        try {
            System.out.println("üìä AdminService: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã");
            
            List<User> allUsers = userRepository.findAll();
            
            int totalUsers = allUsers.size();
            int verifiedUsers = (int) allUsers.stream().filter(User::isVerified).count();
            int usersWithApiKeys = (int) allUsers.stream()
                .filter(u -> u.getWildberriesApiKey() != null && !u.getWildberriesApiKey().isEmpty())
                .count();
            
            // –ü–æ–∫–∞ —á—Ç–æ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            int totalApiCalls = 1247;
            int activeUsers24h = 5;
            int activeUsers7d = 11;
            
            Map<String, Integer> planDistribution = new HashMap<>();
            planDistribution.put("free", Math.max(0, totalUsers - 5));
            planDistribution.put("pro", 4);
            planDistribution.put("enterprise", 1);
            
            AdminStatsDto stats = new AdminStatsDto(
                totalUsers, 
                verifiedUsers, 
                usersWithApiKeys, 
                totalApiCalls, 
                activeUsers24h, 
                activeUsers7d, 
                planDistribution
            );
            
            System.out.println("‚úÖ AdminService: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—Ä–∞–Ω–∞ - " + totalUsers + " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, " + verifiedUsers + " –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö");
            return stats;
            
        } catch (Exception e) {
            System.out.println("‚ùå AdminService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: " + e.getMessage());
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: " + e.getMessage());
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –ø–æ–∏—Å–∫–æ–º
    public Page<AdminUserDto> getUsers(Pageable pageable, String search) {
        try {
            System.out.println("üë• AdminService: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–∏—Å–∫: " + search);
            
            List<User> allUsers = userRepository.findAll();
            
            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
            if (search != null && !search.trim().isEmpty()) {
                String searchLower = search.toLowerCase();
                allUsers = allUsers.stream()
                    .filter(user -> 
                        user.getEmail().toLowerCase().contains(searchLower) ||
                        user.getFirstName().toLowerCase().contains(searchLower) ||
                        user.getLastName().toLowerCase().contains(searchLower)
                    )
                    .collect(Collectors.toList());
            }
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DTO
            List<AdminUserDto> userDtos = allUsers.stream()
                .map(this::convertToAdminUserDto)
                .collect(Collectors.toList());
            
            // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            int start = (int) pageable.getOffset();
            int end = Math.min((start + pageable.getPageSize()), userDtos.size());
            
            List<AdminUserDto> pageContent = userDtos.subList(start, end);
            
            System.out.println("‚úÖ AdminService: –ü–æ–ª—É—á–µ–Ω–æ " + pageContent.size() + " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ " + userDtos.size());
            return new PageImpl<>(pageContent, pageable, userDtos.size());
            
        } catch (Exception e) {
            System.out.println("‚ùå AdminService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + e.getMessage());
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + e.getMessage());
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public AdminUserDto updateUser(Long userId, AdminUserUpdateDto updateDto) {
        try {
            System.out.println("üìù AdminService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: " + userId);
            
            User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
            if (updateDto.getVerified() != null) {
                user.setIsVerified(updateDto.getVerified());
            }
            if (updateDto.getFirstName() != null) {
                user.setFirstName(updateDto.getFirstName());
            }
            if (updateDto.getLastName() != null) {
                user.setLastName(updateDto.getLastName());
            }
            
            user = userRepository.save(user);
            
            System.out.println("‚úÖ AdminService: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: " + user.getEmail());
            return convertToAdminUserDto(user);
            
        } catch (Exception e) {
            System.out.println("‚ùå AdminService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
            throw new RuntimeException("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public void deleteUser(Long userId) {
        try {
            System.out.println("üóëÔ∏è AdminService: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: " + userId);
            
            User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
            
            userRepository.delete(user);
            
            System.out.println("‚úÖ AdminService: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω: " + user.getEmail());
            
        } catch (Exception e) {
            System.out.println("‚ùå AdminService: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
            throw new RuntimeException("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ API –ª–æ–≥–æ–≤
    public Page<AdminApiLogDto> getApiLogs(Pageable pageable, Long userId) {
        try {
            System.out.println("üìã AdminService: –ü–æ–ª—É—á–µ–Ω–∏–µ API –ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + userId);
            
            // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            List<AdminApiLogDto> logs = new ArrayList<>();
            
            // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            logs.add(new AdminApiLogDto(1L, 1L, "admin@test.com", "/analytics/financial-report", "GET", 200, 245L, LocalDateTime.now().minusHours(1), null));
            logs.add(new AdminApiLogDto(2L, 1L, "admin@test.com", "/analytics/user-info", "GET", 200, 180L, LocalDateTime.now().minusHours(2), null));
            logs.add(new AdminApiLogDto(3L, 2L, "user@test.com", "/auth/login", "POST", 200, 120L, LocalDateTime.now().minusHours(3), null));
            
            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (userId != null) {
                logs = logs.stream()
                    .filter(log -> log.getUserId().equals(userId))
                    .collect(Collectors.toList());
            }
            
            // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            int start = (int) pageable.getOffset();
            int end = Math.min((start + pageable.getPageSize()), logs.size());
            
            List<AdminApiLogDto> pageContent = logs.subList(start, end);
            
            System.out.println("‚úÖ AdminService: –ü–æ–ª—É—á–µ–Ω–æ " + pageContent.size() + " –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤");
            return new PageImpl<>(pageContent, pageable, logs.size());
            
        } catch (Exception e) {
            System.out.println("‚ùå AdminService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: " + e.getMessage());
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: " + e.getMessage());
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    public Map<String, Object> getSystemInfo() {
        try {
            System.out.println("‚öôÔ∏è AdminService: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏");
            
            Map<String, Object> systemInfo = new HashMap<>();
            systemInfo.put("appVersion", "1.0.0");
            systemInfo.put("serverStatus", "Running");
            systemInfo.put("uptime", "24h 15m");
            systemInfo.put("dbType", "PostgreSQL");
            systemInfo.put("dbStatus", "Connected");
            systemInfo.put("dbSize", "2.3 MB");
            
            System.out.println("‚úÖ AdminService: –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞");
            return systemInfo;
            
        } catch (Exception e) {
            System.out.println("‚ùå AdminService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: " + e.getMessage());
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: " + e.getMessage());
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏
    public UnitEconomicsDto getUnitEconomics(String userEmail, int days) {
        try {
            System.out.println("üìà AdminService: –ü–æ–ª—É—á–µ–Ω–∏–µ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + userEmail + " –∑–∞ " + days + " –¥–Ω–µ–π");
            
            // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ Excel —Ç–∞–±–ª–∏—Ü—ã
            List<UnitEconomicsDto.UnitEconomicsProductDto> products = new ArrayList<>();
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            for (int i = 1; i <= 5; i++) {
                UnitEconomicsDto.UnitEconomicsProductDto product = new UnitEconomicsDto.UnitEconomicsProductDto();
                product.setId((long) i);
                product.setNmId(233743119L + i);
                product.setVendorCode("ART10000" + i);
                product.setBrandName("Brand " + i);
                
                // –î–∞–Ω–Ω—ã–µ –∏–∑ Excel
                product.setCostPrice(520);
                product.setDeliveryToCostPrice(50);
                product.setGrossProfit(367);
                product.setMpPriceBefore(3300);
                product.setSppDiscount(50);
                product.setPriceAfterSpp(1650);
                product.setBreakEvenPoint(22);
                product.setBuyout(1295);
                product.setMpCommissionPercent(24.5);
                product.setHeight(38);
                product.setWidth(9.5);
                product.setLength(3);
                product.setLogisticsMp(94);
                product.setLogisticsWithBuyout(238.2);
                product.setLogisticsFinal(238);
                product.setMpCommissionRub(404);
                product.setTotalMp(642);
                product.setToPay(1008);
                product.setTax(71);
                product.setRevenueAfterTax(937);
                product.setFinalGrossProfit(367);
                product.setMarkupPercent(68);
                product.setMarginality(22);
                product.setProfitabilityGross(64);
                product.setRoi(70 + i * 5); // –í–∞—Ä–∏–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                
                products.add(product);
            }
            
            // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
            UnitEconomicsDto.UnitEconomicsSummaryDto summary = new UnitEconomicsDto.UnitEconomicsSummaryDto(
                products.size(),
                products.stream().mapToDouble(p -> p.getRevenueAfterTax()).sum(),
                products.stream().mapToDouble(p -> p.getFinalGrossProfit()).sum(),
                products.stream().mapToDouble(p -> p.getTotalMp()).sum(),
                products.stream().mapToDouble(p -> p.getMarginality()).average().orElse(0),
                products.stream().mapToDouble(p -> p.getRoi()).average().orElse(0)
            );
            
            UnitEconomicsDto result = new UnitEconomicsDto(products, summary);
            
            System.out.println("‚úÖ AdminService: –Æ–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ - " + products.size() + " —Ç–æ–≤–∞—Ä–æ–≤");
            return result;
            
        } catch (Exception e) {
            System.out.println("‚ùå AdminService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏: " + e.getMessage());
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏: " + e.getMessage());
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è User –≤ AdminUserDto
    private AdminUserDto convertToAdminUserDto(User user) {
        return new AdminUserDto(
            user.getId(),
            user.getEmail(),
            user.getFirstName(),
            user.getLastName(),
            user.isVerified(),
            user.getWbApiKey() != null && !user.getWbApiKey().isEmpty(),
            user.getCreatedAt(),
            null, // lastLoginAt –ø–æ–∫–∞ —á—Ç–æ null, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ–≥–æ –ø–æ–ª—è –Ω–µ—Ç –≤ User
            0, // –ü–æ–∫–∞ —á—Ç–æ 0 API –≤—ã–∑–æ–≤–æ–≤
            "free" // –ü–æ–∫–∞ —á—Ç–æ –≤—Å–µ –Ω–∞ free –ø–ª–∞–Ω–µ
        );
    }
} 
 
 